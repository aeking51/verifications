{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.base64Encode = base64Encode;\nconst LOOKUP_TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n/**\n * base64Encode is a vanilla-javascript implementation of base64 encoding\n * We expect stytch-node to be run in a variety of runtimes, so\n * we often can't depend on `window.atob` or `new Buffer`.\n *\n * We've experienced problems with two isomorphic base64 libraries so far,\n * so let's just roll our own!\n *\n * We only use this to encode project IDs and secrets, which are guaranteed to be ASCII and not unicode.\n *\n * Heavily, heavily inspired by http://www.webtoolkit.info/javascript-base64.html\n * @param input string\n */\n\nfunction base64Encode(input) {\n  let output = \"\"; // Unicode sanity check\n\n  for (let i = 0; i < input.length; i++) {\n    if (input.charCodeAt(i) > 128) {\n      throw Error(\"Base64 encoded unicode is not supported. Cannot encode \" + input);\n    }\n  }\n  let char1 = 0,\n    char2 = 0,\n    char3 = 0;\n  let enc1 = 0,\n    enc2 = 0,\n    enc3 = 0,\n    enc4 = 0;\n  let i = 0;\n  while (i < input.length) {\n    char1 = input.charCodeAt(i++);\n    char2 = input.charCodeAt(i++);\n    char3 = input.charCodeAt(i++);\n    enc1 = char1 >> 2;\n    enc2 = (char1 & 3) << 4 | char2 >> 4;\n    enc3 = (char2 & 15) << 2 | char3 >> 6;\n    enc4 = char3 & 63;\n    if (isNaN(char2)) {\n      enc3 = enc4 = 64;\n    } else if (isNaN(char3)) {\n      enc4 = 64;\n    }\n    output = output + LOOKUP_TABLE.charAt(enc1) + LOOKUP_TABLE.charAt(enc2) + LOOKUP_TABLE.charAt(enc3) + LOOKUP_TABLE.charAt(enc4);\n  }\n  return output;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","base64Encode","LOOKUP_TABLE","input","output","i","length","charCodeAt","Error","char1","char2","char3","enc1","enc2","enc3","enc4","isNaN","charAt"],"sources":["D:/code/Techfriar/week5-task/verifications/node_modules/stytch/dist/shared/base64.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.base64Encode = base64Encode;\nconst LOOKUP_TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n/**\n * base64Encode is a vanilla-javascript implementation of base64 encoding\n * We expect stytch-node to be run in a variety of runtimes, so\n * we often can't depend on `window.atob` or `new Buffer`.\n *\n * We've experienced problems with two isomorphic base64 libraries so far,\n * so let's just roll our own!\n *\n * We only use this to encode project IDs and secrets, which are guaranteed to be ASCII and not unicode.\n *\n * Heavily, heavily inspired by http://www.webtoolkit.info/javascript-base64.html\n * @param input string\n */\n\nfunction base64Encode(input) {\n  let output = \"\"; // Unicode sanity check\n\n  for (let i = 0; i < input.length; i++) {\n    if (input.charCodeAt(i) > 128) {\n      throw Error(\"Base64 encoded unicode is not supported. Cannot encode \" + input);\n    }\n  }\n\n  let char1 = 0,\n      char2 = 0,\n      char3 = 0;\n  let enc1 = 0,\n      enc2 = 0,\n      enc3 = 0,\n      enc4 = 0;\n  let i = 0;\n\n  while (i < input.length) {\n    char1 = input.charCodeAt(i++);\n    char2 = input.charCodeAt(i++);\n    char3 = input.charCodeAt(i++);\n    enc1 = char1 >> 2;\n    enc2 = (char1 & 3) << 4 | char2 >> 4;\n    enc3 = (char2 & 15) << 2 | char3 >> 6;\n    enc4 = char3 & 63;\n\n    if (isNaN(char2)) {\n      enc3 = enc4 = 64;\n    } else if (isNaN(char3)) {\n      enc4 = 64;\n    }\n\n    output = output + LOOKUP_TABLE.charAt(enc1) + LOOKUP_TABLE.charAt(enc2) + LOOKUP_TABLE.charAt(enc3) + LOOKUP_TABLE.charAt(enc4);\n  }\n\n  return output;\n}"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,YAAY,GAAGA,YAAY;AACnC,MAAMC,YAAY,GAAG,mEAAmE;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASD,YAAYA,CAACE,KAAK,EAAE;EAC3B,IAAIC,MAAM,GAAG,EAAE,CAAC,CAAC;;EAEjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;IACrC,IAAIF,KAAK,CAACI,UAAU,CAACF,CAAC,CAAC,GAAG,GAAG,EAAE;MAC7B,MAAMG,KAAK,CAAC,yDAAyD,GAAGL,KAAK,CAAC;IAChF;EACF;EAEA,IAAIM,KAAK,GAAG,CAAC;IACTC,KAAK,GAAG,CAAC;IACTC,KAAK,GAAG,CAAC;EACb,IAAIC,IAAI,GAAG,CAAC;IACRC,IAAI,GAAG,CAAC;IACRC,IAAI,GAAG,CAAC;IACRC,IAAI,GAAG,CAAC;EACZ,IAAIV,CAAC,GAAG,CAAC;EAET,OAAOA,CAAC,GAAGF,KAAK,CAACG,MAAM,EAAE;IACvBG,KAAK,GAAGN,KAAK,CAACI,UAAU,CAACF,CAAC,EAAE,CAAC;IAC7BK,KAAK,GAAGP,KAAK,CAACI,UAAU,CAACF,CAAC,EAAE,CAAC;IAC7BM,KAAK,GAAGR,KAAK,CAACI,UAAU,CAACF,CAAC,EAAE,CAAC;IAC7BO,IAAI,GAAGH,KAAK,IAAI,CAAC;IACjBI,IAAI,GAAG,CAACJ,KAAK,GAAG,CAAC,KAAK,CAAC,GAAGC,KAAK,IAAI,CAAC;IACpCI,IAAI,GAAG,CAACJ,KAAK,GAAG,EAAE,KAAK,CAAC,GAAGC,KAAK,IAAI,CAAC;IACrCI,IAAI,GAAGJ,KAAK,GAAG,EAAE;IAEjB,IAAIK,KAAK,CAACN,KAAK,CAAC,EAAE;MAChBI,IAAI,GAAGC,IAAI,GAAG,EAAE;IAClB,CAAC,MAAM,IAAIC,KAAK,CAACL,KAAK,CAAC,EAAE;MACvBI,IAAI,GAAG,EAAE;IACX;IAEAX,MAAM,GAAGA,MAAM,GAAGF,YAAY,CAACe,MAAM,CAACL,IAAI,CAAC,GAAGV,YAAY,CAACe,MAAM,CAACJ,IAAI,CAAC,GAAGX,YAAY,CAACe,MAAM,CAACH,IAAI,CAAC,GAAGZ,YAAY,CAACe,MAAM,CAACF,IAAI,CAAC;EACjI;EAEA,OAAOX,MAAM;AACf"},"metadata":{},"sourceType":"script","externalDependencies":[]}