{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Sessions = void 0;\nvar _shared = require(\"../shared\");\nvar _sessions = require(\"../shared/sessions\");\n\n// !!!\n// WARNING: This file is autogenerated\n// Only modify code within MANUAL() sections\n// or your changes may be overwritten later!\n// !!!\nclass Sessions {\n  constructor(fetchConfig, jwtConfig) {\n    this.fetchConfig = fetchConfig;\n    this.jwksClient = jwtConfig.jwks;\n    this.jwtOptions = {\n      audience: jwtConfig.projectID,\n      issuer: `stytch.com/${jwtConfig.projectID}`,\n      typ: \"JWT\"\n    };\n  }\n  /**\n   * List all active Sessions for a given `user_id`. All timestamps are formatted according to the RFC 3339\n   * standard and are expressed in UTC, e.g. `2021-12-29T12:33:09Z`.\n   * @param data {@link SessionsGetRequest}\n   * @returns {@link SessionsGetResponse}\n   * @async\n   * @throws A {@link StytchError} on a non-2xx response from the Stytch API\n   * @throws A {@link RequestError} when the Stytch API cannot be reached\n   */\n\n  get(params) {\n    return (0, _shared.request)(this.fetchConfig, {\n      method: \"GET\",\n      url: `/v1/sessions`,\n      params: {\n        ...params\n      }\n    });\n  }\n  /**\n   * Authenticate a session token and retrieve associated session data. If `session_duration_minutes` is\n   * included, update the lifetime of the session to be that many minutes from now. All timestamps are\n   * formatted according to the RFC 3339 standard and are expressed in UTC, e.g. `2021-12-29T12:33:09Z`. This\n   * endpoint requires exactly one `session_jwt` or `session_token` as part of the request. If both are\n   * included you will receive a `too_many_session_arguments` error.\n   * @param data {@link SessionsAuthenticateRequest}\n   * @returns {@link SessionsAuthenticateResponse}\n   * @async\n   * @throws A {@link StytchError} on a non-2xx response from the Stytch API\n   * @throws A {@link RequestError} when the Stytch API cannot be reached\n   */\n\n  authenticate(data) {\n    return (0, _shared.request)(this.fetchConfig, {\n      method: \"POST\",\n      url: `/v1/sessions/authenticate`,\n      data\n    });\n  }\n  /**\n   * Revoke a Session, immediately invalidating all of its session tokens. You can revoke a session in three\n   * ways: using its ID, or using one of its session tokens, or one of its JWTs. This endpoint requires\n   * exactly one of those to be included in the request. It will return an error if multiple are present.\n   * @param data {@link SessionsRevokeRequest}\n   * @returns {@link SessionsRevokeResponse}\n   * @async\n   * @throws A {@link StytchError} on a non-2xx response from the Stytch API\n   * @throws A {@link RequestError} when the Stytch API cannot be reached\n   */\n\n  revoke(data) {\n    return (0, _shared.request)(this.fetchConfig, {\n      method: \"POST\",\n      url: `/v1/sessions/revoke`,\n      data\n    });\n  }\n  /**\n   * Get the JSON Web Key Set (JWKS) for a Stytch Project.\n   * @param data {@link SessionsGetJWKSRequest}\n   * @returns {@link SessionsGetJWKSResponse}\n   * @async\n   * @throws A {@link StytchError} on a non-2xx response from the Stytch API\n   * @throws A {@link RequestError} when the Stytch API cannot be reached\n   */\n\n  getJWKS(params) {\n    return (0, _shared.request)(this.fetchConfig, {\n      method: \"GET\",\n      url: `/v1/sessions/jwks/${params.project_id}`,\n      params: {}\n    });\n  } // MANUAL(authenticateJwt)(SERVICE_METHOD)\n  // ADDIMPORT: import * as jose from \"jose\";\n  // ADDIMPORT: import { JwtConfig, authenticateSessionJwtLocal } from \"../shared/sessions\";\n\n  /** Parse a JWT and verify the signature, preferring local verification over remote.\n   *\n   * If max_token_age_seconds is set, remote verification will be forced if the JWT was issued at\n   * (based on the \"iat\" claim) more than that many seconds ago.\n   *\n   * To force remote validation for all tokens, set max_token_age_seconds to zero or use the\n   * authenticate method instead.\n   */\n\n  async authenticateJwt(jwt, options) {\n    try {\n      const session = await this.authenticateJwtLocal(jwt, options);\n      return {\n        session,\n        session_jwt: jwt\n      };\n    } catch (err) {\n      // JWT could not be verified locally. Check with the Stytch API.\n      return this.authenticate({\n        session_jwt: jwt\n      });\n    }\n  }\n  /** Parse a JWT and verify the signature locally (without calling /authenticate in the API).\n   *\n   * If maxTokenAge is set, this will return an error if the JWT was issued (based on the \"iat\"\n   * claim) more than maxTokenAge seconds ago.\n   *\n   * If max_token_age_seconds is explicitly set to zero, all tokens will be considered too old,\n   * even if they are otherwise valid.\n   *\n   * The value for current_date is used to compare timestamp claims (\"exp\", \"nbf\", \"iat\"). It\n   * defaults to the current date (new Date()).\n   *\n   * The value for clock_tolerance_seconds is the maximum allowable difference when comparing\n   * timestamps. It defaults to zero.\n   */\n\n  async authenticateJwtLocal(jwt, options) {\n    const sess = await (0, _sessions.authenticateSessionJwtLocal)(this.jwksClient, this.jwtOptions, jwt, options);\n    return {\n      session_id: sess.session_id,\n      attributes: sess.attributes,\n      authentication_factors: sess.authentication_factors,\n      user_id: sess.sub,\n      started_at: sess.started_at,\n      last_accessed_at: sess.last_accessed_at,\n      expires_at: sess.expires_at,\n      custom_claims: sess.custom_claims\n    };\n  } // ENDMANUAL(authenticateJwt)\n}\n\nexports.Sessions = Sessions;","map":{"version":3,"names":["Object","defineProperty","exports","value","Sessions","_shared","require","_sessions","constructor","fetchConfig","jwtConfig","jwksClient","jwks","jwtOptions","audience","projectID","issuer","typ","get","params","request","method","url","authenticate","data","revoke","getJWKS","project_id","authenticateJwt","jwt","options","session","authenticateJwtLocal","session_jwt","err","sess","authenticateSessionJwtLocal","session_id","attributes","authentication_factors","user_id","sub","started_at","last_accessed_at","expires_at","custom_claims"],"sources":["D:/code/Techfriar/week5-task/verifications/node_modules/stytch/dist/b2c/sessions.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Sessions = void 0;\n\nvar _shared = require(\"../shared\");\n\nvar _sessions = require(\"../shared/sessions\");\n\n// !!!\n// WARNING: This file is autogenerated\n// Only modify code within MANUAL() sections\n// or your changes may be overwritten later!\n// !!!\nclass Sessions {\n  constructor(fetchConfig, jwtConfig) {\n    this.fetchConfig = fetchConfig;\n    this.jwksClient = jwtConfig.jwks;\n    this.jwtOptions = {\n      audience: jwtConfig.projectID,\n      issuer: `stytch.com/${jwtConfig.projectID}`,\n      typ: \"JWT\"\n    };\n  }\n  /**\n   * List all active Sessions for a given `user_id`. All timestamps are formatted according to the RFC 3339\n   * standard and are expressed in UTC, e.g. `2021-12-29T12:33:09Z`.\n   * @param data {@link SessionsGetRequest}\n   * @returns {@link SessionsGetResponse}\n   * @async\n   * @throws A {@link StytchError} on a non-2xx response from the Stytch API\n   * @throws A {@link RequestError} when the Stytch API cannot be reached\n   */\n\n\n  get(params) {\n    return (0, _shared.request)(this.fetchConfig, {\n      method: \"GET\",\n      url: `/v1/sessions`,\n      params: { ...params\n      }\n    });\n  }\n  /**\n   * Authenticate a session token and retrieve associated session data. If `session_duration_minutes` is\n   * included, update the lifetime of the session to be that many minutes from now. All timestamps are\n   * formatted according to the RFC 3339 standard and are expressed in UTC, e.g. `2021-12-29T12:33:09Z`. This\n   * endpoint requires exactly one `session_jwt` or `session_token` as part of the request. If both are\n   * included you will receive a `too_many_session_arguments` error.\n   * @param data {@link SessionsAuthenticateRequest}\n   * @returns {@link SessionsAuthenticateResponse}\n   * @async\n   * @throws A {@link StytchError} on a non-2xx response from the Stytch API\n   * @throws A {@link RequestError} when the Stytch API cannot be reached\n   */\n\n\n  authenticate(data) {\n    return (0, _shared.request)(this.fetchConfig, {\n      method: \"POST\",\n      url: `/v1/sessions/authenticate`,\n      data\n    });\n  }\n  /**\n   * Revoke a Session, immediately invalidating all of its session tokens. You can revoke a session in three\n   * ways: using its ID, or using one of its session tokens, or one of its JWTs. This endpoint requires\n   * exactly one of those to be included in the request. It will return an error if multiple are present.\n   * @param data {@link SessionsRevokeRequest}\n   * @returns {@link SessionsRevokeResponse}\n   * @async\n   * @throws A {@link StytchError} on a non-2xx response from the Stytch API\n   * @throws A {@link RequestError} when the Stytch API cannot be reached\n   */\n\n\n  revoke(data) {\n    return (0, _shared.request)(this.fetchConfig, {\n      method: \"POST\",\n      url: `/v1/sessions/revoke`,\n      data\n    });\n  }\n  /**\n   * Get the JSON Web Key Set (JWKS) for a Stytch Project.\n   * @param data {@link SessionsGetJWKSRequest}\n   * @returns {@link SessionsGetJWKSResponse}\n   * @async\n   * @throws A {@link StytchError} on a non-2xx response from the Stytch API\n   * @throws A {@link RequestError} when the Stytch API cannot be reached\n   */\n\n\n  getJWKS(params) {\n    return (0, _shared.request)(this.fetchConfig, {\n      method: \"GET\",\n      url: `/v1/sessions/jwks/${params.project_id}`,\n      params: {}\n    });\n  } // MANUAL(authenticateJwt)(SERVICE_METHOD)\n  // ADDIMPORT: import * as jose from \"jose\";\n  // ADDIMPORT: import { JwtConfig, authenticateSessionJwtLocal } from \"../shared/sessions\";\n\n  /** Parse a JWT and verify the signature, preferring local verification over remote.\n   *\n   * If max_token_age_seconds is set, remote verification will be forced if the JWT was issued at\n   * (based on the \"iat\" claim) more than that many seconds ago.\n   *\n   * To force remote validation for all tokens, set max_token_age_seconds to zero or use the\n   * authenticate method instead.\n   */\n\n\n  async authenticateJwt(jwt, options) {\n    try {\n      const session = await this.authenticateJwtLocal(jwt, options);\n      return {\n        session,\n        session_jwt: jwt\n      };\n    } catch (err) {\n      // JWT could not be verified locally. Check with the Stytch API.\n      return this.authenticate({\n        session_jwt: jwt\n      });\n    }\n  }\n  /** Parse a JWT and verify the signature locally (without calling /authenticate in the API).\n   *\n   * If maxTokenAge is set, this will return an error if the JWT was issued (based on the \"iat\"\n   * claim) more than maxTokenAge seconds ago.\n   *\n   * If max_token_age_seconds is explicitly set to zero, all tokens will be considered too old,\n   * even if they are otherwise valid.\n   *\n   * The value for current_date is used to compare timestamp claims (\"exp\", \"nbf\", \"iat\"). It\n   * defaults to the current date (new Date()).\n   *\n   * The value for clock_tolerance_seconds is the maximum allowable difference when comparing\n   * timestamps. It defaults to zero.\n   */\n\n\n  async authenticateJwtLocal(jwt, options) {\n    const sess = await (0, _sessions.authenticateSessionJwtLocal)(this.jwksClient, this.jwtOptions, jwt, options);\n    return {\n      session_id: sess.session_id,\n      attributes: sess.attributes,\n      authentication_factors: sess.authentication_factors,\n      user_id: sess.sub,\n      started_at: sess.started_at,\n      last_accessed_at: sess.last_accessed_at,\n      expires_at: sess.expires_at,\n      custom_claims: sess.custom_claims\n    };\n  } // ENDMANUAL(authenticateJwt)\n\n\n}\n\nexports.Sessions = Sessions;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}