{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Passwords = void 0;\nvar _passwords_email = require(\"./passwords_email\");\nvar _passwords_existing_password = require(\"./passwords_existing_password\");\nvar _shared = require(\"../shared\");\nvar _passwords_session = require(\"./passwords_session\");\n\n// !!!\n// WARNING: This file is autogenerated\n// Only modify code within MANUAL() sections\n// or your changes may be overwritten later!\n// !!!\nclass Passwords {\n  constructor(fetchConfig) {\n    this.fetchConfig = fetchConfig;\n    this.email = new _passwords_email.Email(this.fetchConfig);\n    this.existingPassword = new _passwords_existing_password.ExistingPassword(this.fetchConfig);\n    this.sessions = new _passwords_session.Sessions(this.fetchConfig);\n  }\n  /**\n   * Create a new user with a password. If `session_duration_minutes` is specified, a new session will be\n   * started as well.\n   *\n   * If a user with this email already exists in your Stytch project, this endpoint will return a\n   * `duplicate_email` error. To add a password to an existing passwordless user, you'll need to either call\n   * the [Migrate password endpoint](https://stytch.com/docs/api/password-migrate) or prompt the user to\n   * complete one of our password reset flows.\n   *\n   * This endpoint will return an error if the password provided does not meet our strength requirements,\n   * which you can check beforehand via the\n   * [Password strength check endpoint](https://stytch.com/docs/api/password-strength-check).\n   *\n   * When creating new Passwords users, it's good practice to enforce an email verification flow. We'd\n   * recommend checking out our\n   * [Email verification guide](https://stytch.com/docs/guides/passwords/email-verification/overview) for\n   * more information.\n   * @param data {@link PasswordsCreateRequest}\n   * @returns {@link PasswordsCreateResponse}\n   * @async\n   * @throws A {@link StytchError} on a non-2xx response from the Stytch API\n   * @throws A {@link RequestError} when the Stytch API cannot be reached\n   */\n\n  create(data) {\n    return (0, _shared.request)(this.fetchConfig, {\n      method: \"POST\",\n      url: `/v1/passwords`,\n      data\n    });\n  }\n  /**\n   * Authenticate a user with their email address and password. This endpoint verifies that the user has a\n   * password currently set, and that the entered password is correct. There are two instances where the\n   * endpoint will return a `reset_password` error even if they enter their previous password:\n   *\n   * **One:** The user’s credentials appeared in the HaveIBeenPwned dataset. We force a password reset to\n   * ensure that the user is the legitimate owner of the email address, and not a malicious actor abusing the\n   * compromised credentials.\n   *\n   * **Two:** A user that has previously authenticated with email/password uses a passwordless authentication\n   * method tied to the same email address (e.g. Magic Links, Google OAuth) for the first time. Any\n   * subsequent email/password authentication attempt will result in this error. We force a password reset in\n   * this instance in order to safely deduplicate the account by email address, without introducing the risk\n   * of a pre-hijack account takeover attack.\n   *\n   * Imagine a bad actor creates many accounts using passwords and the known email addresses of their\n   * victims. If a victim comes to the site and logs in for the first time with an email-based passwordless\n   * authentication method then both the victim and the bad actor have credentials to access to the same\n   * account. To prevent this, any further email/password login attempts first require a password reset which\n   * can only be accomplished by someone with access to the underlying email address.\n   * @param data {@link PasswordsAuthenticateRequest}\n   * @returns {@link PasswordsAuthenticateResponse}\n   * @async\n   * @throws A {@link StytchError} on a non-2xx response from the Stytch API\n   * @throws A {@link RequestError} when the Stytch API cannot be reached\n   */\n\n  authenticate(data) {\n    return (0, _shared.request)(this.fetchConfig, {\n      method: \"POST\",\n      url: `/v1/passwords/authenticate`,\n      data\n    });\n  }\n  /**\n   * This API allows you to check whether or not the user’s provided password is valid, and to provide\n   * feedback to the user on how to increase the strength of their password.\n   *\n   * This endpoint adapts to your Project's password strength configuration. If you're using\n   * [zxcvbn](https://stytch.com/docs/guides/passwords/strength-policy), the default, your passwords are\n   * considered valid if the strength score is >= 3. If you're using\n   * [LUDS](https://stytch.com/docs/guides/passwords/strength-policy), your passwords are considered valid if\n   * they meet the requirements that you've set with Stytch. You may update your password strength\n   * configuration in the [stytch dashboard](https://stytch.com/dashboard/password-strength-config).\n   *\n   *\n   * ### Password feedback\n   *\n   * The `feedback` object contains relevant fields for you to relay feedback to users that failed to create\n   * a strong enough password.\n   *\n   * If you're using zxcvbn, the `feedback` object will contain `warning` and `suggestions` for any password\n   * that does not meet the zxcvbn strength requirements. You can return these strings directly to the user\n   * to help them craft a strong password.\n   *\n   * If you're using LUDS, the `feedback` object will contain an object named `luds_requirements` which\n   * contain a collection of fields that the user failed or passed. You'll want to prompt the user to create\n   * a password that meets all of the requirements that they failed.\n   * @param data {@link PasswordsStrengthCheckRequest}\n   * @returns {@link PasswordsStrengthCheckResponse}\n   * @async\n   * @throws A {@link StytchError} on a non-2xx response from the Stytch API\n   * @throws A {@link RequestError} when the Stytch API cannot be reached\n   */\n\n  strengthCheck(data) {\n    return (0, _shared.request)(this.fetchConfig, {\n      method: \"POST\",\n      url: `/v1/passwords/strength_check`,\n      data\n    });\n  }\n  /**\n   * Adds an existing password to a User's email that doesn't have a password yet. We support migrating users\n   * from passwords stored with `bcrypt`, `scrypt`, `argon2`, `MD-5`, `SHA-1`, or `PBKDF2`. This endpoint has\n   * a rate limit of 100 requests per second.\n   * @param data {@link PasswordsMigrateRequest}\n   * @returns {@link PasswordsMigrateResponse}\n   * @async\n   * @throws A {@link StytchError} on a non-2xx response from the Stytch API\n   * @throws A {@link RequestError} when the Stytch API cannot be reached\n   */\n\n  migrate(data) {\n    return (0, _shared.request)(this.fetchConfig, {\n      method: \"POST\",\n      url: `/v1/passwords/migrate`,\n      data\n    });\n  }\n}\nexports.Passwords = Passwords;","map":{"version":3,"names":["Object","defineProperty","exports","value","Passwords","_passwords_email","require","_passwords_existing_password","_shared","_passwords_session","constructor","fetchConfig","email","Email","existingPassword","ExistingPassword","sessions","Sessions","create","data","request","method","url","authenticate","strengthCheck","migrate"],"sources":["D:/code/Techfriar/week5-task/verifications/node_modules/stytch/dist/b2c/passwords.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Passwords = void 0;\n\nvar _passwords_email = require(\"./passwords_email\");\n\nvar _passwords_existing_password = require(\"./passwords_existing_password\");\n\nvar _shared = require(\"../shared\");\n\nvar _passwords_session = require(\"./passwords_session\");\n\n// !!!\n// WARNING: This file is autogenerated\n// Only modify code within MANUAL() sections\n// or your changes may be overwritten later!\n// !!!\nclass Passwords {\n  constructor(fetchConfig) {\n    this.fetchConfig = fetchConfig;\n    this.email = new _passwords_email.Email(this.fetchConfig);\n    this.existingPassword = new _passwords_existing_password.ExistingPassword(this.fetchConfig);\n    this.sessions = new _passwords_session.Sessions(this.fetchConfig);\n  }\n  /**\n   * Create a new user with a password. If `session_duration_minutes` is specified, a new session will be\n   * started as well.\n   *\n   * If a user with this email already exists in your Stytch project, this endpoint will return a\n   * `duplicate_email` error. To add a password to an existing passwordless user, you'll need to either call\n   * the [Migrate password endpoint](https://stytch.com/docs/api/password-migrate) or prompt the user to\n   * complete one of our password reset flows.\n   *\n   * This endpoint will return an error if the password provided does not meet our strength requirements,\n   * which you can check beforehand via the\n   * [Password strength check endpoint](https://stytch.com/docs/api/password-strength-check).\n   *\n   * When creating new Passwords users, it's good practice to enforce an email verification flow. We'd\n   * recommend checking out our\n   * [Email verification guide](https://stytch.com/docs/guides/passwords/email-verification/overview) for\n   * more information.\n   * @param data {@link PasswordsCreateRequest}\n   * @returns {@link PasswordsCreateResponse}\n   * @async\n   * @throws A {@link StytchError} on a non-2xx response from the Stytch API\n   * @throws A {@link RequestError} when the Stytch API cannot be reached\n   */\n\n\n  create(data) {\n    return (0, _shared.request)(this.fetchConfig, {\n      method: \"POST\",\n      url: `/v1/passwords`,\n      data\n    });\n  }\n  /**\n   * Authenticate a user with their email address and password. This endpoint verifies that the user has a\n   * password currently set, and that the entered password is correct. There are two instances where the\n   * endpoint will return a `reset_password` error even if they enter their previous password:\n   *\n   * **One:** The user’s credentials appeared in the HaveIBeenPwned dataset. We force a password reset to\n   * ensure that the user is the legitimate owner of the email address, and not a malicious actor abusing the\n   * compromised credentials.\n   *\n   * **Two:** A user that has previously authenticated with email/password uses a passwordless authentication\n   * method tied to the same email address (e.g. Magic Links, Google OAuth) for the first time. Any\n   * subsequent email/password authentication attempt will result in this error. We force a password reset in\n   * this instance in order to safely deduplicate the account by email address, without introducing the risk\n   * of a pre-hijack account takeover attack.\n   *\n   * Imagine a bad actor creates many accounts using passwords and the known email addresses of their\n   * victims. If a victim comes to the site and logs in for the first time with an email-based passwordless\n   * authentication method then both the victim and the bad actor have credentials to access to the same\n   * account. To prevent this, any further email/password login attempts first require a password reset which\n   * can only be accomplished by someone with access to the underlying email address.\n   * @param data {@link PasswordsAuthenticateRequest}\n   * @returns {@link PasswordsAuthenticateResponse}\n   * @async\n   * @throws A {@link StytchError} on a non-2xx response from the Stytch API\n   * @throws A {@link RequestError} when the Stytch API cannot be reached\n   */\n\n\n  authenticate(data) {\n    return (0, _shared.request)(this.fetchConfig, {\n      method: \"POST\",\n      url: `/v1/passwords/authenticate`,\n      data\n    });\n  }\n  /**\n   * This API allows you to check whether or not the user’s provided password is valid, and to provide\n   * feedback to the user on how to increase the strength of their password.\n   *\n   * This endpoint adapts to your Project's password strength configuration. If you're using\n   * [zxcvbn](https://stytch.com/docs/guides/passwords/strength-policy), the default, your passwords are\n   * considered valid if the strength score is >= 3. If you're using\n   * [LUDS](https://stytch.com/docs/guides/passwords/strength-policy), your passwords are considered valid if\n   * they meet the requirements that you've set with Stytch. You may update your password strength\n   * configuration in the [stytch dashboard](https://stytch.com/dashboard/password-strength-config).\n   *\n   *\n   * ### Password feedback\n   *\n   * The `feedback` object contains relevant fields for you to relay feedback to users that failed to create\n   * a strong enough password.\n   *\n   * If you're using zxcvbn, the `feedback` object will contain `warning` and `suggestions` for any password\n   * that does not meet the zxcvbn strength requirements. You can return these strings directly to the user\n   * to help them craft a strong password.\n   *\n   * If you're using LUDS, the `feedback` object will contain an object named `luds_requirements` which\n   * contain a collection of fields that the user failed or passed. You'll want to prompt the user to create\n   * a password that meets all of the requirements that they failed.\n   * @param data {@link PasswordsStrengthCheckRequest}\n   * @returns {@link PasswordsStrengthCheckResponse}\n   * @async\n   * @throws A {@link StytchError} on a non-2xx response from the Stytch API\n   * @throws A {@link RequestError} when the Stytch API cannot be reached\n   */\n\n\n  strengthCheck(data) {\n    return (0, _shared.request)(this.fetchConfig, {\n      method: \"POST\",\n      url: `/v1/passwords/strength_check`,\n      data\n    });\n  }\n  /**\n   * Adds an existing password to a User's email that doesn't have a password yet. We support migrating users\n   * from passwords stored with `bcrypt`, `scrypt`, `argon2`, `MD-5`, `SHA-1`, or `PBKDF2`. This endpoint has\n   * a rate limit of 100 requests per second.\n   * @param data {@link PasswordsMigrateRequest}\n   * @returns {@link PasswordsMigrateResponse}\n   * @async\n   * @throws A {@link StytchError} on a non-2xx response from the Stytch API\n   * @throws A {@link RequestError} when the Stytch API cannot be reached\n   */\n\n\n  migrate(data) {\n    return (0, _shared.request)(this.fetchConfig, {\n      method: \"POST\",\n      url: `/v1/passwords/migrate`,\n      data\n    });\n  }\n\n}\n\nexports.Passwords = Passwords;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,SAAS,GAAG,KAAK,CAAC;AAE1B,IAAIC,gBAAgB,GAAGC,OAAO,CAAC,mBAAmB,CAAC;AAEnD,IAAIC,4BAA4B,GAAGD,OAAO,CAAC,+BAA+B,CAAC;AAE3E,IAAIE,OAAO,GAAGF,OAAO,CAAC,WAAW,CAAC;AAElC,IAAIG,kBAAkB,GAAGH,OAAO,CAAC,qBAAqB,CAAC;;AAEvD;AACA;AACA;AACA;AACA;AACA,MAAMF,SAAS,CAAC;EACdM,WAAWA,CAACC,WAAW,EAAE;IACvB,IAAI,CAACA,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,KAAK,GAAG,IAAIP,gBAAgB,CAACQ,KAAK,CAAC,IAAI,CAACF,WAAW,CAAC;IACzD,IAAI,CAACG,gBAAgB,GAAG,IAAIP,4BAA4B,CAACQ,gBAAgB,CAAC,IAAI,CAACJ,WAAW,CAAC;IAC3F,IAAI,CAACK,QAAQ,GAAG,IAAIP,kBAAkB,CAACQ,QAAQ,CAAC,IAAI,CAACN,WAAW,CAAC;EACnE;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGEO,MAAMA,CAACC,IAAI,EAAE;IACX,OAAO,CAAC,CAAC,EAAEX,OAAO,CAACY,OAAO,EAAE,IAAI,CAACT,WAAW,EAAE;MAC5CU,MAAM,EAAE,MAAM;MACdC,GAAG,EAAG,eAAc;MACpBH;IACF,CAAC,CAAC;EACJ;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGEI,YAAYA,CAACJ,IAAI,EAAE;IACjB,OAAO,CAAC,CAAC,EAAEX,OAAO,CAACY,OAAO,EAAE,IAAI,CAACT,WAAW,EAAE;MAC5CU,MAAM,EAAE,MAAM;MACdC,GAAG,EAAG,4BAA2B;MACjCH;IACF,CAAC,CAAC;EACJ;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGEK,aAAaA,CAACL,IAAI,EAAE;IAClB,OAAO,CAAC,CAAC,EAAEX,OAAO,CAACY,OAAO,EAAE,IAAI,CAACT,WAAW,EAAE;MAC5CU,MAAM,EAAE,MAAM;MACdC,GAAG,EAAG,8BAA6B;MACnCH;IACF,CAAC,CAAC;EACJ;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGEM,OAAOA,CAACN,IAAI,EAAE;IACZ,OAAO,CAAC,CAAC,EAAEX,OAAO,CAACY,OAAO,EAAE,IAAI,CAACT,WAAW,EAAE;MAC5CU,MAAM,EAAE,MAAM;MACdC,GAAG,EAAG,uBAAsB;MAC5BH;IACF,CAAC,CAAC;EACJ;AAEF;AAEAjB,OAAO,CAACE,SAAS,GAAGA,SAAS"},"metadata":{},"sourceType":"script","externalDependencies":[]}