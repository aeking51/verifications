{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SAML = void 0;\nvar _shared = require(\"../shared\");\n\n// !!!\n// WARNING: This file is autogenerated\n// Only modify code within MANUAL() sections\n// or your changes may be overwritten later!\n// !!!\nclass SAML {\n  constructor(fetchConfig) {\n    this.fetchConfig = fetchConfig;\n  }\n  /**\n   * Create a new SAML Connection.\n   * @param data {@link B2BSSOSAMLCreateConnectionRequest}\n   * @returns {@link B2BSSOSAMLCreateConnectionResponse}\n   * @async\n   * @throws A {@link StytchError} on a non-2xx response from the Stytch API\n   * @throws A {@link RequestError} when the Stytch API cannot be reached\n   */\n\n  createConnection(data) {\n    return (0, _shared.request)(this.fetchConfig, {\n      method: \"POST\",\n      url: `/v1/b2b/sso/saml/${data.organization_id}`,\n      data: {\n        display_name: data.display_name\n      }\n    });\n  }\n  /**\n   * Updates an existing SAML connection.\n   *\n   * Note that a newly created connection will not become active until all of the following are provided:\n   * * `idp_sso_url`\n   * * `attribute_mapping`\n   * * `idp_entity_id`\n   * * `x509_certificate`\n   * @param data {@link B2BSSOSAMLUpdateConnectionRequest}\n   * @returns {@link B2BSSOSAMLUpdateConnectionResponse}\n   * @async\n   * @throws A {@link StytchError} on a non-2xx response from the Stytch API\n   * @throws A {@link RequestError} when the Stytch API cannot be reached\n   */\n\n  updateConnection(data) {\n    return (0, _shared.request)(this.fetchConfig, {\n      method: \"PUT\",\n      url: `/v1/b2b/sso/saml/${data.organization_id}/connections/${data.connection_id}`,\n      data: {\n        idp_entity_id: data.idp_entity_id,\n        display_name: data.display_name,\n        attribute_mapping: data.attribute_mapping,\n        x509_certificate: data.x509_certificate,\n        idp_sso_url: data.idp_sso_url\n      }\n    });\n  }\n  /**\n   * Delete a SAML verification certificate.\n   *\n   * You may need to do this when rotating certificates from your IdP, since Stytch allows a maximum of 5\n   * certificates per connection. There must always be at least one certificate per active connection.\n   * @param data {@link B2BSSOSAMLDeleteVerificationCertificateRequest}\n   * @returns {@link B2BSSOSAMLDeleteVerificationCertificateResponse}\n   * @async\n   * @throws A {@link StytchError} on a non-2xx response from the Stytch API\n   * @throws A {@link RequestError} when the Stytch API cannot be reached\n   */\n\n  deleteVerificationCertificate(data) {\n    return (0, _shared.request)(this.fetchConfig, {\n      method: \"DELETE\",\n      url: `/v1/b2b/sso/saml/${data.organization_id}/connections/${data.connection_id}/verification_certificates/${data.certificate_id}`,\n      data: {}\n    });\n  }\n}\nexports.SAML = SAML;","map":{"version":3,"names":["Object","defineProperty","exports","value","SAML","_shared","require","constructor","fetchConfig","createConnection","data","request","method","url","organization_id","display_name","updateConnection","connection_id","idp_entity_id","attribute_mapping","x509_certificate","idp_sso_url","deleteVerificationCertificate","certificate_id"],"sources":["D:/code/Techfriar/week5-task/verifications/node_modules/stytch/dist/b2b/sso_saml.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SAML = void 0;\n\nvar _shared = require(\"../shared\");\n\n// !!!\n// WARNING: This file is autogenerated\n// Only modify code within MANUAL() sections\n// or your changes may be overwritten later!\n// !!!\nclass SAML {\n  constructor(fetchConfig) {\n    this.fetchConfig = fetchConfig;\n  }\n  /**\n   * Create a new SAML Connection.\n   * @param data {@link B2BSSOSAMLCreateConnectionRequest}\n   * @returns {@link B2BSSOSAMLCreateConnectionResponse}\n   * @async\n   * @throws A {@link StytchError} on a non-2xx response from the Stytch API\n   * @throws A {@link RequestError} when the Stytch API cannot be reached\n   */\n\n\n  createConnection(data) {\n    return (0, _shared.request)(this.fetchConfig, {\n      method: \"POST\",\n      url: `/v1/b2b/sso/saml/${data.organization_id}`,\n      data: {\n        display_name: data.display_name\n      }\n    });\n  }\n  /**\n   * Updates an existing SAML connection.\n   *\n   * Note that a newly created connection will not become active until all of the following are provided:\n   * * `idp_sso_url`\n   * * `attribute_mapping`\n   * * `idp_entity_id`\n   * * `x509_certificate`\n   * @param data {@link B2BSSOSAMLUpdateConnectionRequest}\n   * @returns {@link B2BSSOSAMLUpdateConnectionResponse}\n   * @async\n   * @throws A {@link StytchError} on a non-2xx response from the Stytch API\n   * @throws A {@link RequestError} when the Stytch API cannot be reached\n   */\n\n\n  updateConnection(data) {\n    return (0, _shared.request)(this.fetchConfig, {\n      method: \"PUT\",\n      url: `/v1/b2b/sso/saml/${data.organization_id}/connections/${data.connection_id}`,\n      data: {\n        idp_entity_id: data.idp_entity_id,\n        display_name: data.display_name,\n        attribute_mapping: data.attribute_mapping,\n        x509_certificate: data.x509_certificate,\n        idp_sso_url: data.idp_sso_url\n      }\n    });\n  }\n  /**\n   * Delete a SAML verification certificate.\n   *\n   * You may need to do this when rotating certificates from your IdP, since Stytch allows a maximum of 5\n   * certificates per connection. There must always be at least one certificate per active connection.\n   * @param data {@link B2BSSOSAMLDeleteVerificationCertificateRequest}\n   * @returns {@link B2BSSOSAMLDeleteVerificationCertificateResponse}\n   * @async\n   * @throws A {@link StytchError} on a non-2xx response from the Stytch API\n   * @throws A {@link RequestError} when the Stytch API cannot be reached\n   */\n\n\n  deleteVerificationCertificate(data) {\n    return (0, _shared.request)(this.fetchConfig, {\n      method: \"DELETE\",\n      url: `/v1/b2b/sso/saml/${data.organization_id}/connections/${data.connection_id}/verification_certificates/${data.certificate_id}`,\n      data: {}\n    });\n  }\n\n}\n\nexports.SAML = SAML;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,IAAI,GAAG,KAAK,CAAC;AAErB,IAAIC,OAAO,GAAGC,OAAO,CAAC,WAAW,CAAC;;AAElC;AACA;AACA;AACA;AACA;AACA,MAAMF,IAAI,CAAC;EACTG,WAAWA,CAACC,WAAW,EAAE;IACvB,IAAI,CAACA,WAAW,GAAGA,WAAW;EAChC;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EAGEC,gBAAgBA,CAACC,IAAI,EAAE;IACrB,OAAO,CAAC,CAAC,EAAEL,OAAO,CAACM,OAAO,EAAE,IAAI,CAACH,WAAW,EAAE;MAC5CI,MAAM,EAAE,MAAM;MACdC,GAAG,EAAG,oBAAmBH,IAAI,CAACI,eAAgB,EAAC;MAC/CJ,IAAI,EAAE;QACJK,YAAY,EAAEL,IAAI,CAACK;MACrB;IACF,CAAC,CAAC;EACJ;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGEC,gBAAgBA,CAACN,IAAI,EAAE;IACrB,OAAO,CAAC,CAAC,EAAEL,OAAO,CAACM,OAAO,EAAE,IAAI,CAACH,WAAW,EAAE;MAC5CI,MAAM,EAAE,KAAK;MACbC,GAAG,EAAG,oBAAmBH,IAAI,CAACI,eAAgB,gBAAeJ,IAAI,CAACO,aAAc,EAAC;MACjFP,IAAI,EAAE;QACJQ,aAAa,EAAER,IAAI,CAACQ,aAAa;QACjCH,YAAY,EAAEL,IAAI,CAACK,YAAY;QAC/BI,iBAAiB,EAAET,IAAI,CAACS,iBAAiB;QACzCC,gBAAgB,EAAEV,IAAI,CAACU,gBAAgB;QACvCC,WAAW,EAAEX,IAAI,CAACW;MACpB;IACF,CAAC,CAAC;EACJ;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGEC,6BAA6BA,CAACZ,IAAI,EAAE;IAClC,OAAO,CAAC,CAAC,EAAEL,OAAO,CAACM,OAAO,EAAE,IAAI,CAACH,WAAW,EAAE;MAC5CI,MAAM,EAAE,QAAQ;MAChBC,GAAG,EAAG,oBAAmBH,IAAI,CAACI,eAAgB,gBAAeJ,IAAI,CAACO,aAAc,8BAA6BP,IAAI,CAACa,cAAe,EAAC;MAClIb,IAAI,EAAE,CAAC;IACT,CAAC,CAAC;EACJ;AAEF;AAEAR,OAAO,CAACE,IAAI,GAAGA,IAAI"},"metadata":{},"sourceType":"script","externalDependencies":[]}