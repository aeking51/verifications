{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.M2M = void 0;\nvar _m2m_clients = require(\"./m2m_clients\");\nvar _sessions = require(\"../shared/sessions\");\nvar _errors = require(\"../shared/errors\");\nvar _shared = require(\"../shared\");\n\n// !!!\n// WARNING: This file is autogenerated\n// Only modify code within MANUAL() sections\n// or your changes may be overwritten later!\n// !!!\n// ENDMANUAL(Token)\nclass M2M {\n  constructor(fetchConfig, jwtConfig) {\n    this.fetchConfig = fetchConfig;\n    this.clients = new _m2m_clients.Clients(this.fetchConfig);\n    this.jwksClient = jwtConfig.jwks;\n    this.jwtOptions = {\n      audience: jwtConfig.projectID,\n      issuer: `stytch.com/${jwtConfig.projectID}`,\n      typ: \"JWT\"\n    };\n  } // MANUAL(token)(SERVICE_METHOD)\n\n  /**\n   * Retrieve an access token for the given M2M Client.\n   * Access tokens are JWTs signed with the project's JWKS, and are valid for one hour after issuance.\n   * M2M Access tokens contain a standard set of claims as well as any custom claims generated from templates.\n   *\n   * M2M Access tokens can be validated locally using the Authenticate Access Token method in the Stytch Backend SDKs,\n   * or with any library that supports JWT signature validation.\n   *\n   * Here is an example of a standard set of claims from a M2M Access Token:\n   *   ```\n   *  {\n   *    \"sub\": \"m2m-client-test-d731954d-dab3-4a2b-bdee-07f3ad1be885\",\n   *    \"iss\": \"stytch.com/project-test-3e71d0a1-1e3e-4ee2-9be0-d7c0900f02c2\",\n   *    \"aud\": [\"project-test-3e71d0a1-1e3e-4ee2-9be0-d7c0900f02c2\"],\n   *    \"scope\": \"read:users write:users\",\n   *    \"iat\": 4102473300,\n   *    \"nbf\": 4102473300,\n   *    \"exp\": 4102476900\n   *  }\n   *  ```\n   * @param data {@link TokenRequest}\n   * @async\n   * @returns {@link TokenResponse}\n   * @throws A {@link StytchError} on a non-2xx response from the Stytch API\n   * @throws A {@link RequestError} when the Stytch API cannot be reached\n   */\n\n  async token(data) {\n    const fetchConfig = {\n      ...this.fetchConfig,\n      headers: {\n        [\"User-Agent\"]: this.fetchConfig.headers[\"User-Agent\"],\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      }\n    };\n    const params = {\n      client_id: data.client_id,\n      client_secret: data.client_secret,\n      grant_type: \"client_credentials\"\n    };\n    if (data.scopes && data.scopes.length > 0) {\n      var _data$scopes;\n      params.scope = (_data$scopes = data.scopes) === null || _data$scopes === void 0 ? void 0 : _data$scopes.join(\" \");\n    }\n    return (0, _shared.request)(fetchConfig, {\n      method: \"POST\",\n      url: `/v1/public/${this.jwtOptions.audience}/oauth2/token`,\n      dataRaw: new URLSearchParams(params)\n    });\n  } // ENDMANUAL(token)\n  // MANUAL(authenticateToken)(SERVICE_METHOD)\n  // ADDIMPORT: import * as jose from \"jose\";\n  // ADDIMPORT: import { authenticateM2MJwtLocal, JwtConfig } from \"../shared/sessions\";\n  // ADDIMPORT: import { ClientError } from \"../shared/errors\";\n  // ADDIMPORT: import { request } from \"../shared\";\n  // I do not know why, but it only works if we add the ADDIMPORT here, not on the ^ manual section\n\n  /**\n   * Authenticate an access token issued by Stytch from the Token endpoint.\n   * M2M access tokens are JWTs signed with the project's JWKs, and can be validated locally using any Stytch client library.\n   * You may pass in an optional set of scopes that the JWT must contain in order to enforce permissions.\n   *\n   * @param data {@link AuthenticateTokenRequest}\n   * @async\n   * @returns {@link AuthenticateTokenResponse}\n   * @throws {ClientError} when token can not be authenticated\n   */\n\n  async authenticateToken(data) {\n    const {\n      sub,\n      scope,\n      custom_claims\n    } = await (0, _sessions.authenticateM2MJwtLocal)(this.jwksClient, this.jwtOptions, data.access_token, {\n      max_token_age_seconds: data.max_token_age_seconds\n    });\n    const scopes = scope.split(\" \");\n    if (data.required_scopes && data.required_scopes.length > 0) {\n      const missingScopes = data.required_scopes.filter(scope => !scopes.includes(scope));\n      if (missingScopes.length > 0) {\n        throw new _errors.ClientError(\"missing_scopes\", \"Missing required scopes\", missingScopes);\n      }\n    }\n    return {\n      client_id: sub,\n      scopes,\n      custom_claims\n    };\n  } // ENDMANUAL(authenticateToken)\n}\n\nexports.M2M = M2M;","map":{"version":3,"names":["Object","defineProperty","exports","value","M2M","_m2m_clients","require","_sessions","_errors","_shared","constructor","fetchConfig","jwtConfig","clients","Clients","jwksClient","jwks","jwtOptions","audience","projectID","issuer","typ","token","data","headers","params","client_id","client_secret","grant_type","scopes","length","_data$scopes","scope","join","request","method","url","dataRaw","URLSearchParams","authenticateToken","sub","custom_claims","authenticateM2MJwtLocal","access_token","max_token_age_seconds","split","required_scopes","missingScopes","filter","includes","ClientError"],"sources":["D:/code/Techfriar/week5-task/verifications/node_modules/stytch/dist/b2c/m2m.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.M2M = void 0;\n\nvar _m2m_clients = require(\"./m2m_clients\");\n\nvar _sessions = require(\"../shared/sessions\");\n\nvar _errors = require(\"../shared/errors\");\n\nvar _shared = require(\"../shared\");\n\n// !!!\n// WARNING: This file is autogenerated\n// Only modify code within MANUAL() sections\n// or your changes may be overwritten later!\n// !!!\n// ENDMANUAL(Token)\nclass M2M {\n  constructor(fetchConfig, jwtConfig) {\n    this.fetchConfig = fetchConfig;\n    this.clients = new _m2m_clients.Clients(this.fetchConfig);\n    this.jwksClient = jwtConfig.jwks;\n    this.jwtOptions = {\n      audience: jwtConfig.projectID,\n      issuer: `stytch.com/${jwtConfig.projectID}`,\n      typ: \"JWT\"\n    };\n  } // MANUAL(token)(SERVICE_METHOD)\n\n  /**\n   * Retrieve an access token for the given M2M Client.\n   * Access tokens are JWTs signed with the project's JWKS, and are valid for one hour after issuance.\n   * M2M Access tokens contain a standard set of claims as well as any custom claims generated from templates.\n   *\n   * M2M Access tokens can be validated locally using the Authenticate Access Token method in the Stytch Backend SDKs,\n   * or with any library that supports JWT signature validation.\n   *\n   * Here is an example of a standard set of claims from a M2M Access Token:\n   *   ```\n   *  {\n   *    \"sub\": \"m2m-client-test-d731954d-dab3-4a2b-bdee-07f3ad1be885\",\n   *    \"iss\": \"stytch.com/project-test-3e71d0a1-1e3e-4ee2-9be0-d7c0900f02c2\",\n   *    \"aud\": [\"project-test-3e71d0a1-1e3e-4ee2-9be0-d7c0900f02c2\"],\n   *    \"scope\": \"read:users write:users\",\n   *    \"iat\": 4102473300,\n   *    \"nbf\": 4102473300,\n   *    \"exp\": 4102476900\n   *  }\n   *  ```\n   * @param data {@link TokenRequest}\n   * @async\n   * @returns {@link TokenResponse}\n   * @throws A {@link StytchError} on a non-2xx response from the Stytch API\n   * @throws A {@link RequestError} when the Stytch API cannot be reached\n   */\n\n\n  async token(data) {\n    const fetchConfig = { ...this.fetchConfig,\n      headers: {\n        [\"User-Agent\"]: this.fetchConfig.headers[\"User-Agent\"],\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      }\n    };\n    const params = {\n      client_id: data.client_id,\n      client_secret: data.client_secret,\n      grant_type: \"client_credentials\"\n    };\n\n    if (data.scopes && data.scopes.length > 0) {\n      var _data$scopes;\n\n      params.scope = (_data$scopes = data.scopes) === null || _data$scopes === void 0 ? void 0 : _data$scopes.join(\" \");\n    }\n\n    return (0, _shared.request)(fetchConfig, {\n      method: \"POST\",\n      url: `/v1/public/${this.jwtOptions.audience}/oauth2/token`,\n      dataRaw: new URLSearchParams(params)\n    });\n  } // ENDMANUAL(token)\n  // MANUAL(authenticateToken)(SERVICE_METHOD)\n  // ADDIMPORT: import * as jose from \"jose\";\n  // ADDIMPORT: import { authenticateM2MJwtLocal, JwtConfig } from \"../shared/sessions\";\n  // ADDIMPORT: import { ClientError } from \"../shared/errors\";\n  // ADDIMPORT: import { request } from \"../shared\";\n  // I do not know why, but it only works if we add the ADDIMPORT here, not on the ^ manual section\n\n  /**\n   * Authenticate an access token issued by Stytch from the Token endpoint.\n   * M2M access tokens are JWTs signed with the project's JWKs, and can be validated locally using any Stytch client library.\n   * You may pass in an optional set of scopes that the JWT must contain in order to enforce permissions.\n   *\n   * @param data {@link AuthenticateTokenRequest}\n   * @async\n   * @returns {@link AuthenticateTokenResponse}\n   * @throws {ClientError} when token can not be authenticated\n   */\n\n\n  async authenticateToken(data) {\n    const {\n      sub,\n      scope,\n      custom_claims\n    } = await (0, _sessions.authenticateM2MJwtLocal)(this.jwksClient, this.jwtOptions, data.access_token, {\n      max_token_age_seconds: data.max_token_age_seconds\n    });\n    const scopes = scope.split(\" \");\n\n    if (data.required_scopes && data.required_scopes.length > 0) {\n      const missingScopes = data.required_scopes.filter(scope => !scopes.includes(scope));\n\n      if (missingScopes.length > 0) {\n        throw new _errors.ClientError(\"missing_scopes\", \"Missing required scopes\", missingScopes);\n      }\n    }\n\n    return {\n      client_id: sub,\n      scopes,\n      custom_claims\n    };\n  } // ENDMANUAL(authenticateToken)\n\n\n}\n\nexports.M2M = M2M;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}