{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Sessions = void 0;\nvar _shared = require(\"../shared\");\nvar _sessions = require(\"../shared/sessions\");\n\n// !!!\n// WARNING: This file is autogenerated\n// Only modify code within MANUAL() sections\n// or your changes may be overwritten later!\n// !!!\nclass Sessions {\n  constructor(fetchConfig, jwtConfig) {\n    this.fetchConfig = fetchConfig;\n    this.jwksClient = jwtConfig.jwks;\n    this.jwtOptions = {\n      audience: jwtConfig.projectID,\n      issuer: `stytch.com/${jwtConfig.projectID}`,\n      typ: \"JWT\"\n    };\n  }\n  /**\n   * Retrieves all active Sessions for a Member.\n   * @param data {@link B2BSessionsGetRequest}\n   * @returns {@link B2BSessionsGetResponse}\n   * @async\n   * @throws A {@link StytchError} on a non-2xx response from the Stytch API\n   * @throws A {@link RequestError} when the Stytch API cannot be reached\n   */\n\n  get(params) {\n    return (0, _shared.request)(this.fetchConfig, {\n      method: \"GET\",\n      url: `/v1/b2b/sessions`,\n      params: {\n        ...params\n      }\n    });\n  }\n  /**\n   * Authenticates a Session and updates its lifetime by the specified `session_duration_minutes`. If the\n   * `session_duration_minutes` is not specified, a Session will not be extended. This endpoint requires\n   * either a `session_jwt` or `session_token` be included in the request. It will return an error if both\n   * are present.\n   *\n   * You may provide a JWT that needs to be refreshed and is expired according to its `exp` claim. A new JWT\n   * will be returned if both the signature and the underlying Session are still valid.\n   * @param data {@link B2BSessionsAuthenticateRequest}\n   * @returns {@link B2BSessionsAuthenticateResponse}\n   * @async\n   * @throws A {@link StytchError} on a non-2xx response from the Stytch API\n   * @throws A {@link RequestError} when the Stytch API cannot be reached\n   */\n\n  authenticate(data) {\n    return (0, _shared.request)(this.fetchConfig, {\n      method: \"POST\",\n      url: `/v1/b2b/sessions/authenticate`,\n      data\n    });\n  }\n  /**\n   * Revoke a Session and immediately invalidate all its tokens. To revoke a specific Session, pass either\n   * the `member_session_id`, `session_token`, or `session_jwt`. To revoke all Sessions for a Member, pass\n   * the `member_id`.\n   * @param data {@link B2BSessionsRevokeRequest}\n   * @returns {@link B2BSessionsRevokeResponse}\n   * @async\n   * @throws A {@link StytchError} on a non-2xx response from the Stytch API\n   * @throws A {@link RequestError} when the Stytch API cannot be reached\n   */\n\n  revoke(data) {\n    return (0, _shared.request)(this.fetchConfig, {\n      method: \"POST\",\n      url: `/v1/b2b/sessions/revoke`,\n      data\n    });\n  }\n  /**\n   * Use this endpoint to exchange a Member's existing session for another session in a different\n   * Organization. This can be used to accept an invite, but not to create a new member via domain matching.\n   *\n   * To create a new member via domain matching, use the\n   * [Exchange Intermediate Session](https://stytch.com/docs/b2b/api/exchange-intermediate-session) flow\n   * instead.\n   *\n   * Only Email Magic Link, OAuth, and SMS OTP factors can be transferred between sessions. Other\n   * authentication factors, such as password factors, will not be transferred to the new session.\n   * SMS OTP factors can be used to fulfill MFA requirements for the target Organization if both the original\n   * and target Member have the same phone number and the phone number is verified for both Members.\n   *\n   * If the Member is required to complete MFA to log in to the Organization, the returned value of\n   * `member_authenticated` will be `false`, and an `intermediate_session_token` will be returned.\n   * The `intermediate_session_token` can be passed into the\n   * [OTP SMS Authenticate endpoint](https://stytch.com/docs/b2b/api/authenticate-otp-sms) to complete the\n   * MFA step and acquire a full member session.\n   * The `intermediate_session_token` can also be used with the\n   * [Exchange Intermediate Session endpoint](https://stytch.com/docs/b2b/api/exchange-intermediate-session)\n   * or the\n   * [Create Organization via Discovery endpoint](https://stytch.com/docs/b2b/api/create-organization-via-discovery) to join a different Organization or create a new one.\n   * The `session_duration_minutes` and `session_custom_claims` parameters will be ignored.\n   * @param data {@link B2BSessionsExchangeRequest}\n   * @returns {@link B2BSessionsExchangeResponse}\n   * @async\n   * @throws A {@link StytchError} on a non-2xx response from the Stytch API\n   * @throws A {@link RequestError} when the Stytch API cannot be reached\n   */\n\n  exchange(data) {\n    return (0, _shared.request)(this.fetchConfig, {\n      method: \"POST\",\n      url: `/v1/b2b/sessions/exchange`,\n      data\n    });\n  }\n  /**\n   * Get the JSON Web Key Set (JWKS) for a project.\n   * @param data {@link B2BSessionsGetJWKSRequest}\n   * @returns {@link B2BSessionsGetJWKSResponse}\n   * @async\n   * @throws A {@link StytchError} on a non-2xx response from the Stytch API\n   * @throws A {@link RequestError} when the Stytch API cannot be reached\n   */\n\n  getJWKS(params) {\n    return (0, _shared.request)(this.fetchConfig, {\n      method: \"GET\",\n      url: `/v1/b2b/sessions/jwks/${params.project_id}`,\n      params: {}\n    });\n  } // MANUAL(authenticateJwt)(SERVICE_METHOD)\n  // ADDIMPORT: import * as jose from \"jose\";\n  // ADDIMPORT: import { JwtConfig, authenticateSessionJwtLocal } from \"../shared/sessions\";\n\n  /** Parse a JWT and verify the signature, preferring local verification over remote.\n   *\n   * If max_token_age_seconds is set, remote verification will be forced if the JWT was issued at\n   * (based on the \"iat\" claim) more than that many seconds ago.\n   *\n   * To force remote validation for all tokens, set max_token_age_seconds to zero or use the\n   * authenticate method instead.\n   */\n\n  async authenticateJwt(jwt, options) {\n    try {\n      const member_session = await this.authenticateJwtLocal(jwt, options);\n      return {\n        member_session,\n        session_jwt: jwt\n      };\n    } catch (err) {\n      // JWT could not be verified locally. Check with the Stytch API.\n      return this.authenticate({\n        session_jwt: jwt\n      });\n    }\n  }\n  /** Parse a JWT and verify the signature locally (without calling /authenticate in the API).\n   *\n   * If maxTokenAge is set, this will return an error if the JWT was issued (based on the \"iat\"\n   * claim) more than maxTokenAge seconds ago.\n   *\n   * If max_token_age_seconds is explicitly set to zero, all tokens will be considered too old,\n   * even if they are otherwise valid.\n   *\n   * The value for current_date is used to compare timestamp claims (\"exp\", \"nbf\", \"iat\"). It\n   * defaults to the current date (new Date()).\n   *\n   * The value for clock_tolerance_seconds is the maximum allowable difference when comparing\n   * timestamps. It defaults to zero.\n   */\n\n  async authenticateJwtLocal(jwt, options) {\n    const sess = await (0, _sessions.authenticateSessionJwtLocal)(this.jwksClient, this.jwtOptions, jwt, options);\n    const organizationClaim = \"https://stytch.com/organization\";\n    const {\n      [organizationClaim]: orgClaimUntyped,\n      ...claims\n    } = sess.custom_claims;\n    const orgClaim = orgClaimUntyped;\n    return {\n      member_session_id: sess.session_id,\n      member_id: sess.sub,\n      organization_id: orgClaim.organization_id,\n      authentication_factors: sess.authentication_factors,\n      started_at: sess.started_at,\n      last_accessed_at: sess.last_accessed_at,\n      expires_at: sess.expires_at,\n      custom_claims: claims\n    };\n  } // ENDMANUAL(authenticateJwt)\n}\n\nexports.Sessions = Sessions;","map":{"version":3,"names":["Object","defineProperty","exports","value","Sessions","_shared","require","_sessions","constructor","fetchConfig","jwtConfig","jwksClient","jwks","jwtOptions","audience","projectID","issuer","typ","get","params","request","method","url","authenticate","data","revoke","exchange","getJWKS","project_id","authenticateJwt","jwt","options","member_session","authenticateJwtLocal","session_jwt","err","sess","authenticateSessionJwtLocal","organizationClaim","orgClaimUntyped","claims","custom_claims","orgClaim","member_session_id","session_id","member_id","sub","organization_id","authentication_factors","started_at","last_accessed_at","expires_at"],"sources":["D:/code/Techfriar/week5-task/verifications/node_modules/stytch/dist/b2b/sessions.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Sessions = void 0;\n\nvar _shared = require(\"../shared\");\n\nvar _sessions = require(\"../shared/sessions\");\n\n// !!!\n// WARNING: This file is autogenerated\n// Only modify code within MANUAL() sections\n// or your changes may be overwritten later!\n// !!!\nclass Sessions {\n  constructor(fetchConfig, jwtConfig) {\n    this.fetchConfig = fetchConfig;\n    this.jwksClient = jwtConfig.jwks;\n    this.jwtOptions = {\n      audience: jwtConfig.projectID,\n      issuer: `stytch.com/${jwtConfig.projectID}`,\n      typ: \"JWT\"\n    };\n  }\n  /**\n   * Retrieves all active Sessions for a Member.\n   * @param data {@link B2BSessionsGetRequest}\n   * @returns {@link B2BSessionsGetResponse}\n   * @async\n   * @throws A {@link StytchError} on a non-2xx response from the Stytch API\n   * @throws A {@link RequestError} when the Stytch API cannot be reached\n   */\n\n\n  get(params) {\n    return (0, _shared.request)(this.fetchConfig, {\n      method: \"GET\",\n      url: `/v1/b2b/sessions`,\n      params: { ...params\n      }\n    });\n  }\n  /**\n   * Authenticates a Session and updates its lifetime by the specified `session_duration_minutes`. If the\n   * `session_duration_minutes` is not specified, a Session will not be extended. This endpoint requires\n   * either a `session_jwt` or `session_token` be included in the request. It will return an error if both\n   * are present.\n   *\n   * You may provide a JWT that needs to be refreshed and is expired according to its `exp` claim. A new JWT\n   * will be returned if both the signature and the underlying Session are still valid.\n   * @param data {@link B2BSessionsAuthenticateRequest}\n   * @returns {@link B2BSessionsAuthenticateResponse}\n   * @async\n   * @throws A {@link StytchError} on a non-2xx response from the Stytch API\n   * @throws A {@link RequestError} when the Stytch API cannot be reached\n   */\n\n\n  authenticate(data) {\n    return (0, _shared.request)(this.fetchConfig, {\n      method: \"POST\",\n      url: `/v1/b2b/sessions/authenticate`,\n      data\n    });\n  }\n  /**\n   * Revoke a Session and immediately invalidate all its tokens. To revoke a specific Session, pass either\n   * the `member_session_id`, `session_token`, or `session_jwt`. To revoke all Sessions for a Member, pass\n   * the `member_id`.\n   * @param data {@link B2BSessionsRevokeRequest}\n   * @returns {@link B2BSessionsRevokeResponse}\n   * @async\n   * @throws A {@link StytchError} on a non-2xx response from the Stytch API\n   * @throws A {@link RequestError} when the Stytch API cannot be reached\n   */\n\n\n  revoke(data) {\n    return (0, _shared.request)(this.fetchConfig, {\n      method: \"POST\",\n      url: `/v1/b2b/sessions/revoke`,\n      data\n    });\n  }\n  /**\n   * Use this endpoint to exchange a Member's existing session for another session in a different\n   * Organization. This can be used to accept an invite, but not to create a new member via domain matching.\n   *\n   * To create a new member via domain matching, use the\n   * [Exchange Intermediate Session](https://stytch.com/docs/b2b/api/exchange-intermediate-session) flow\n   * instead.\n   *\n   * Only Email Magic Link, OAuth, and SMS OTP factors can be transferred between sessions. Other\n   * authentication factors, such as password factors, will not be transferred to the new session.\n   * SMS OTP factors can be used to fulfill MFA requirements for the target Organization if both the original\n   * and target Member have the same phone number and the phone number is verified for both Members.\n   *\n   * If the Member is required to complete MFA to log in to the Organization, the returned value of\n   * `member_authenticated` will be `false`, and an `intermediate_session_token` will be returned.\n   * The `intermediate_session_token` can be passed into the\n   * [OTP SMS Authenticate endpoint](https://stytch.com/docs/b2b/api/authenticate-otp-sms) to complete the\n   * MFA step and acquire a full member session.\n   * The `intermediate_session_token` can also be used with the\n   * [Exchange Intermediate Session endpoint](https://stytch.com/docs/b2b/api/exchange-intermediate-session)\n   * or the\n   * [Create Organization via Discovery endpoint](https://stytch.com/docs/b2b/api/create-organization-via-discovery) to join a different Organization or create a new one.\n   * The `session_duration_minutes` and `session_custom_claims` parameters will be ignored.\n   * @param data {@link B2BSessionsExchangeRequest}\n   * @returns {@link B2BSessionsExchangeResponse}\n   * @async\n   * @throws A {@link StytchError} on a non-2xx response from the Stytch API\n   * @throws A {@link RequestError} when the Stytch API cannot be reached\n   */\n\n\n  exchange(data) {\n    return (0, _shared.request)(this.fetchConfig, {\n      method: \"POST\",\n      url: `/v1/b2b/sessions/exchange`,\n      data\n    });\n  }\n  /**\n   * Get the JSON Web Key Set (JWKS) for a project.\n   * @param data {@link B2BSessionsGetJWKSRequest}\n   * @returns {@link B2BSessionsGetJWKSResponse}\n   * @async\n   * @throws A {@link StytchError} on a non-2xx response from the Stytch API\n   * @throws A {@link RequestError} when the Stytch API cannot be reached\n   */\n\n\n  getJWKS(params) {\n    return (0, _shared.request)(this.fetchConfig, {\n      method: \"GET\",\n      url: `/v1/b2b/sessions/jwks/${params.project_id}`,\n      params: {}\n    });\n  } // MANUAL(authenticateJwt)(SERVICE_METHOD)\n  // ADDIMPORT: import * as jose from \"jose\";\n  // ADDIMPORT: import { JwtConfig, authenticateSessionJwtLocal } from \"../shared/sessions\";\n\n  /** Parse a JWT and verify the signature, preferring local verification over remote.\n   *\n   * If max_token_age_seconds is set, remote verification will be forced if the JWT was issued at\n   * (based on the \"iat\" claim) more than that many seconds ago.\n   *\n   * To force remote validation for all tokens, set max_token_age_seconds to zero or use the\n   * authenticate method instead.\n   */\n\n\n  async authenticateJwt(jwt, options) {\n    try {\n      const member_session = await this.authenticateJwtLocal(jwt, options);\n      return {\n        member_session,\n        session_jwt: jwt\n      };\n    } catch (err) {\n      // JWT could not be verified locally. Check with the Stytch API.\n      return this.authenticate({\n        session_jwt: jwt\n      });\n    }\n  }\n  /** Parse a JWT and verify the signature locally (without calling /authenticate in the API).\n   *\n   * If maxTokenAge is set, this will return an error if the JWT was issued (based on the \"iat\"\n   * claim) more than maxTokenAge seconds ago.\n   *\n   * If max_token_age_seconds is explicitly set to zero, all tokens will be considered too old,\n   * even if they are otherwise valid.\n   *\n   * The value for current_date is used to compare timestamp claims (\"exp\", \"nbf\", \"iat\"). It\n   * defaults to the current date (new Date()).\n   *\n   * The value for clock_tolerance_seconds is the maximum allowable difference when comparing\n   * timestamps. It defaults to zero.\n   */\n\n\n  async authenticateJwtLocal(jwt, options) {\n    const sess = await (0, _sessions.authenticateSessionJwtLocal)(this.jwksClient, this.jwtOptions, jwt, options);\n    const organizationClaim = \"https://stytch.com/organization\";\n    const {\n      [organizationClaim]: orgClaimUntyped,\n      ...claims\n    } = sess.custom_claims;\n    const orgClaim = orgClaimUntyped;\n    return {\n      member_session_id: sess.session_id,\n      member_id: sess.sub,\n      organization_id: orgClaim.organization_id,\n      authentication_factors: sess.authentication_factors,\n      started_at: sess.started_at,\n      last_accessed_at: sess.last_accessed_at,\n      expires_at: sess.expires_at,\n      custom_claims: claims\n    };\n  } // ENDMANUAL(authenticateJwt)\n\n\n}\n\nexports.Sessions = Sessions;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}