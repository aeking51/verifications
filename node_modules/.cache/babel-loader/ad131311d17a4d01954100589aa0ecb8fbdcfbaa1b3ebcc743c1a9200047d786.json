{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.authenticateJwtLocal = authenticateJwtLocal;\nexports.authenticateM2MJwtLocal = authenticateM2MJwtLocal;\nexports.authenticateSessionJwtLocal = authenticateSessionJwtLocal;\nvar jose = _interopRequireWildcard(require(\"jose\"));\nvar _errors = require(\"./errors\");\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function (nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n  var cache = _getRequireWildcardCache(nodeInterop);\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\nconst sessionClaim = \"https://stytch.com/session\";\nasync function authenticateJwtLocal(jwksClient, jwtOptions, jwt, options) {\n  const now = (options === null || options === void 0 ? void 0 : options.current_date) || new Date();\n  let payload;\n  try {\n    const token = await jose.jwtVerify(jwt, jwksClient, {\n      ...jwtOptions,\n      clockTolerance: options === null || options === void 0 ? void 0 : options.clock_tolerance_seconds,\n      currentDate: now // Don't pass maxTokenAge directly to jwtVerify because it interprets zero as \"infinity\".\n      // We want zero to mean \"every token is stale\" and force remote verification.\n    });\n\n    payload = token.payload;\n  } catch (err) {\n    throw new _errors.ClientError(\"jwt_invalid\", \"Could not verify JWT\", err);\n  }\n  const maxTokenAge = options === null || options === void 0 ? void 0 : options.max_token_age_seconds;\n  if (maxTokenAge != null) {\n    const iat = payload.iat;\n    if (!iat) {\n      throw new _errors.ClientError(\"jwt_invalid\", \"JWT was missing iat claim\");\n    }\n    const nowEpoch = +now / 1000; // Epoch seconds from milliseconds\n\n    if (nowEpoch - iat >= maxTokenAge) {\n      throw new _errors.ClientError(\"jwt_too_old\", `JWT was issued at ${iat}, more than ${maxTokenAge} seconds ago`);\n    }\n  } // The custom claim set is all the claims in the payload except for the standard claims and\n  // the Stytch session claim. The cleanest way to collect those seems to be naming what we want\n  // to omit and using ...rest for to collect the custom claims.\n\n  const {\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    aud: _aud,\n    exp: _exp,\n    iat: _iat,\n    iss: _iss,\n    jti: _jti,\n    nbf: _nbf,\n    sub: _sub,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...customClaims\n  } = payload;\n  return {\n    payload,\n    customClaims\n  };\n}\nasync function authenticateM2MJwtLocal(jwksClient, jwtOptions, jwt, options) {\n  const {\n    payload,\n    customClaims: untypedClaims\n  } = await authenticateJwtLocal(jwksClient, jwtOptions, jwt, options);\n  const {\n    scope: scopeClaim,\n    ...customClaims\n  } = untypedClaims;\n  const scope = scopeClaim;\n  return {\n    sub: payload.sub ?? \"\",\n    scope: scope,\n    custom_claims: customClaims\n  };\n}\nasync function authenticateSessionJwtLocal(jwksClient, jwtOptions, jwt, options) {\n  const {\n    payload,\n    customClaims: untypedClaims\n  } = await authenticateJwtLocal(jwksClient, jwtOptions, jwt, options); // The custom claim set is all the claims in the payload except for the standard claims and\n  // the Stytch session claim. The cleanest way to collect those seems to be naming what we want\n  // to omit and using ...rest for to collect the custom claims.\n\n  const {\n    [sessionClaim]: stytchClaim,\n    ...customClaims\n  } = untypedClaims;\n  const claim = stytchClaim;\n  return {\n    session_id: claim.id,\n    attributes: claim.attributes,\n    authentication_factors: claim.authentication_factors,\n    sub: payload.sub || \"\",\n    // The JWT expiration time is the same as the session's.\n    // The exp claim is a Unix timestamp in seconds, so convert it to milliseconds first. The\n    // other timestamps are RFC3339-formatted strings.\n    started_at: claim.started_at,\n    last_accessed_at: claim.last_accessed_at,\n    // For JWTs that include it, prefer the inner expires_at claim.\n    expires_at: new Date(claim.expires_at || (payload.exp || 0) * 1000).toISOString(),\n    custom_claims: customClaims\n  };\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","authenticateJwtLocal","authenticateM2MJwtLocal","authenticateSessionJwtLocal","jose","_interopRequireWildcard","require","_errors","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","sessionClaim","jwksClient","jwtOptions","jwt","options","now","current_date","Date","payload","token","jwtVerify","clockTolerance","clock_tolerance_seconds","currentDate","err","ClientError","maxTokenAge","max_token_age_seconds","iat","nowEpoch","aud","_aud","exp","_exp","_iat","iss","_iss","jti","_jti","nbf","_nbf","sub","_sub","customClaims","untypedClaims","scope","scopeClaim","custom_claims","stytchClaim","claim","session_id","id","attributes","authentication_factors","started_at","last_accessed_at","expires_at","toISOString"],"sources":["D:/code/Techfriar/week5-task/verifications/node_modules/stytch/dist/shared/sessions.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.authenticateJwtLocal = authenticateJwtLocal;\nexports.authenticateM2MJwtLocal = authenticateM2MJwtLocal;\nexports.authenticateSessionJwtLocal = authenticateSessionJwtLocal;\n\nvar jose = _interopRequireWildcard(require(\"jose\"));\n\nvar _errors = require(\"./errors\");\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nconst sessionClaim = \"https://stytch.com/session\";\n\nasync function authenticateJwtLocal(jwksClient, jwtOptions, jwt, options) {\n  const now = (options === null || options === void 0 ? void 0 : options.current_date) || new Date();\n  let payload;\n\n  try {\n    const token = await jose.jwtVerify(jwt, jwksClient, { ...jwtOptions,\n      clockTolerance: options === null || options === void 0 ? void 0 : options.clock_tolerance_seconds,\n      currentDate: now // Don't pass maxTokenAge directly to jwtVerify because it interprets zero as \"infinity\".\n      // We want zero to mean \"every token is stale\" and force remote verification.\n\n    });\n    payload = token.payload;\n  } catch (err) {\n    throw new _errors.ClientError(\"jwt_invalid\", \"Could not verify JWT\", err);\n  }\n\n  const maxTokenAge = options === null || options === void 0 ? void 0 : options.max_token_age_seconds;\n\n  if (maxTokenAge != null) {\n    const iat = payload.iat;\n\n    if (!iat) {\n      throw new _errors.ClientError(\"jwt_invalid\", \"JWT was missing iat claim\");\n    }\n\n    const nowEpoch = +now / 1000; // Epoch seconds from milliseconds\n\n    if (nowEpoch - iat >= maxTokenAge) {\n      throw new _errors.ClientError(\"jwt_too_old\", `JWT was issued at ${iat}, more than ${maxTokenAge} seconds ago`);\n    }\n  } // The custom claim set is all the claims in the payload except for the standard claims and\n  // the Stytch session claim. The cleanest way to collect those seems to be naming what we want\n  // to omit and using ...rest for to collect the custom claims.\n\n\n  const {\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    aud: _aud,\n    exp: _exp,\n    iat: _iat,\n    iss: _iss,\n    jti: _jti,\n    nbf: _nbf,\n    sub: _sub,\n\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...customClaims\n  } = payload;\n  return {\n    payload,\n    customClaims\n  };\n}\n\nasync function authenticateM2MJwtLocal(jwksClient, jwtOptions, jwt, options) {\n  const {\n    payload,\n    customClaims: untypedClaims\n  } = await authenticateJwtLocal(jwksClient, jwtOptions, jwt, options);\n  const {\n    scope: scopeClaim,\n    ...customClaims\n  } = untypedClaims;\n  const scope = scopeClaim;\n  return {\n    sub: payload.sub ?? \"\",\n    scope: scope,\n    custom_claims: customClaims\n  };\n}\n\nasync function authenticateSessionJwtLocal(jwksClient, jwtOptions, jwt, options) {\n  const {\n    payload,\n    customClaims: untypedClaims\n  } = await authenticateJwtLocal(jwksClient, jwtOptions, jwt, options); // The custom claim set is all the claims in the payload except for the standard claims and\n  // the Stytch session claim. The cleanest way to collect those seems to be naming what we want\n  // to omit and using ...rest for to collect the custom claims.\n\n  const {\n    [sessionClaim]: stytchClaim,\n    ...customClaims\n  } = untypedClaims;\n  const claim = stytchClaim;\n  return {\n    session_id: claim.id,\n    attributes: claim.attributes,\n    authentication_factors: claim.authentication_factors,\n    sub: payload.sub || \"\",\n    // The JWT expiration time is the same as the session's.\n    // The exp claim is a Unix timestamp in seconds, so convert it to milliseconds first. The\n    // other timestamps are RFC3339-formatted strings.\n    started_at: claim.started_at,\n    last_accessed_at: claim.last_accessed_at,\n    // For JWTs that include it, prefer the inner expires_at claim.\n    expires_at: new Date(claim.expires_at || (payload.exp || 0) * 1000).toISOString(),\n    custom_claims: customClaims\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}