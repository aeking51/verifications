{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Email = void 0;\nvar _shared = require(\"../shared\");\n\n// !!!\n// WARNING: This file is autogenerated\n// Only modify code within MANUAL() sections\n// or your changes may be overwritten later!\n// !!!\nclass Email {\n  constructor(fetchConfig) {\n    this.fetchConfig = fetchConfig;\n  }\n  /**\n   * Send a One-Time Passcode (OTP) to a User using their email. If you'd like to create a user and send them\n   * a passcode with one request, use our\n   * [log in or create endpoint](https://stytch.com/docs/api/log-in-or-create-user-by-email-otp).\n   *\n   * ### Add an email to an existing user\n   * This endpoint also allows you to add a new email address to an existing Stytch User. Including a\n   * `user_id`, `session_token`, or `session_jwt` in your Send one-time passcode by email request will add\n   * the new, unverified email address to the existing Stytch User. Upon successful authentication, the email\n   * address will be marked as verified.\n   *\n   * ### Next steps\n   * Collect the OTP which was delivered to the user. Call\n   * [Authenticate OTP](https://stytch.com/docs/api/authenticate-otp) using the OTP `code` along with the\n   * `phone_id` found in the response as the `method_id`.\n   * @param data {@link OTPsEmailSendRequest}\n   * @returns {@link OTPsEmailSendResponse}\n   * @async\n   * @throws A {@link StytchError} on a non-2xx response from the Stytch API\n   * @throws A {@link RequestError} when the Stytch API cannot be reached\n   */\n\n  send(data) {\n    return (0, _shared.request)(this.fetchConfig, {\n      method: \"POST\",\n      url: `/v1/otps/email/send`,\n      data\n    });\n  }\n  /**\n   * Send a one-time passcode (OTP) to a User using their email. If the email is not associated with a User\n   * already, a User will be created.\n   *\n   * ### Next steps\n   *\n   * Collect the OTP which was delivered to the User. Call\n   * [Authenticate OTP](https://stytch.com/docs/api/authenticate-otp) using the OTP `code` along with the\n   * `phone_id` found in the response as the `method_id`.\n   * @param data {@link OTPsEmailLoginOrCreateRequest}\n   * @returns {@link OTPsEmailLoginOrCreateResponse}\n   * @async\n   * @throws A {@link StytchError} on a non-2xx response from the Stytch API\n   * @throws A {@link RequestError} when the Stytch API cannot be reached\n   */\n\n  loginOrCreate(data) {\n    return (0, _shared.request)(this.fetchConfig, {\n      method: \"POST\",\n      url: `/v1/otps/email/login_or_create`,\n      data\n    });\n  }\n}\nexports.Email = Email;","map":{"version":3,"names":["Object","defineProperty","exports","value","Email","_shared","require","constructor","fetchConfig","send","data","request","method","url","loginOrCreate"],"sources":["D:/code/Techfriar/week5-task/verifications/node_modules/stytch/dist/b2c/otps_email.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Email = void 0;\n\nvar _shared = require(\"../shared\");\n\n// !!!\n// WARNING: This file is autogenerated\n// Only modify code within MANUAL() sections\n// or your changes may be overwritten later!\n// !!!\nclass Email {\n  constructor(fetchConfig) {\n    this.fetchConfig = fetchConfig;\n  }\n  /**\n   * Send a One-Time Passcode (OTP) to a User using their email. If you'd like to create a user and send them\n   * a passcode with one request, use our\n   * [log in or create endpoint](https://stytch.com/docs/api/log-in-or-create-user-by-email-otp).\n   *\n   * ### Add an email to an existing user\n   * This endpoint also allows you to add a new email address to an existing Stytch User. Including a\n   * `user_id`, `session_token`, or `session_jwt` in your Send one-time passcode by email request will add\n   * the new, unverified email address to the existing Stytch User. Upon successful authentication, the email\n   * address will be marked as verified.\n   *\n   * ### Next steps\n   * Collect the OTP which was delivered to the user. Call\n   * [Authenticate OTP](https://stytch.com/docs/api/authenticate-otp) using the OTP `code` along with the\n   * `phone_id` found in the response as the `method_id`.\n   * @param data {@link OTPsEmailSendRequest}\n   * @returns {@link OTPsEmailSendResponse}\n   * @async\n   * @throws A {@link StytchError} on a non-2xx response from the Stytch API\n   * @throws A {@link RequestError} when the Stytch API cannot be reached\n   */\n\n\n  send(data) {\n    return (0, _shared.request)(this.fetchConfig, {\n      method: \"POST\",\n      url: `/v1/otps/email/send`,\n      data\n    });\n  }\n  /**\n   * Send a one-time passcode (OTP) to a User using their email. If the email is not associated with a User\n   * already, a User will be created.\n   *\n   * ### Next steps\n   *\n   * Collect the OTP which was delivered to the User. Call\n   * [Authenticate OTP](https://stytch.com/docs/api/authenticate-otp) using the OTP `code` along with the\n   * `phone_id` found in the response as the `method_id`.\n   * @param data {@link OTPsEmailLoginOrCreateRequest}\n   * @returns {@link OTPsEmailLoginOrCreateResponse}\n   * @async\n   * @throws A {@link StytchError} on a non-2xx response from the Stytch API\n   * @throws A {@link RequestError} when the Stytch API cannot be reached\n   */\n\n\n  loginOrCreate(data) {\n    return (0, _shared.request)(this.fetchConfig, {\n      method: \"POST\",\n      url: `/v1/otps/email/login_or_create`,\n      data\n    });\n  }\n\n}\n\nexports.Email = Email;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,KAAK,GAAG,KAAK,CAAC;AAEtB,IAAIC,OAAO,GAAGC,OAAO,CAAC,WAAW,CAAC;;AAElC;AACA;AACA;AACA;AACA;AACA,MAAMF,KAAK,CAAC;EACVG,WAAWA,CAACC,WAAW,EAAE;IACvB,IAAI,CAACA,WAAW,GAAGA,WAAW;EAChC;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGEC,IAAIA,CAACC,IAAI,EAAE;IACT,OAAO,CAAC,CAAC,EAAEL,OAAO,CAACM,OAAO,EAAE,IAAI,CAACH,WAAW,EAAE;MAC5CI,MAAM,EAAE,MAAM;MACdC,GAAG,EAAG,qBAAoB;MAC1BH;IACF,CAAC,CAAC;EACJ;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGEI,aAAaA,CAACJ,IAAI,EAAE;IAClB,OAAO,CAAC,CAAC,EAAEL,OAAO,CAACM,OAAO,EAAE,IAAI,CAACH,WAAW,EAAE;MAC5CI,MAAM,EAAE,MAAM;MACdC,GAAG,EAAG,gCAA+B;MACrCH;IACF,CAAC,CAAC;EACJ;AAEF;AAEAR,OAAO,CAACE,KAAK,GAAGA,KAAK"},"metadata":{},"sourceType":"script","externalDependencies":[]}