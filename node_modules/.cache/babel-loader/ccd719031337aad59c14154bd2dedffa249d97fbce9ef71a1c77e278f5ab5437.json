{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OIDC = void 0;\nvar _shared = require(\"../shared\");\n\n// !!!\n// WARNING: This file is autogenerated\n// Only modify code within MANUAL() sections\n// or your changes may be overwritten later!\n// !!!\nclass OIDC {\n  constructor(fetchConfig) {\n    this.fetchConfig = fetchConfig;\n  }\n  /**\n   * Create a new OIDC Connection.\n   * @param data {@link B2BSSOOIDCCreateConnectionRequest}\n   * @returns {@link B2BSSOOIDCCreateConnectionResponse}\n   * @async\n   * @throws A {@link StytchError} on a non-2xx response from the Stytch API\n   * @throws A {@link RequestError} when the Stytch API cannot be reached\n   */\n\n  createConnection(data) {\n    return (0, _shared.request)(this.fetchConfig, {\n      method: \"POST\",\n      url: `/v1/b2b/sso/oidc/${data.organization_id}`,\n      data: {\n        display_name: data.display_name\n      }\n    });\n  }\n  /**\n   * Updates an existing OIDC connection.\n   *\n   * When the value of `issuer` changes, Stytch will attempt to retrieve the\n   * [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata)\n   * document found at `$/.well-known/openid-configuration`.\n   * If the metadata document can be retrieved successfully, Stytch will use it to infer the values of\n   * `authorization_url`, `token_url`, `jwks_url`, and `userinfo_url`.\n   * The `client_id` and `client_secret` values cannot be inferred from the metadata document, and *must* be\n   * passed in explicitly.\n   *\n   * If the metadata document cannot be retrieved, Stytch will still update the connection using values from\n   * the request body.\n   *\n   * If the metadata document can be retrieved, and values are passed in the request body, the explicit\n   * values passed in from the request body will take precedence over the values inferred from the metadata\n   * document.\n   *\n   * Note that a newly created connection will not become active until all of the following fields are\n   * provided:\n   * * `issuer`\n   * * `client_id`\n   * * `client_secret`\n   * * `authorization_url`\n   * * `token_url`\n   * * `userinfo_url`\n   * * `jwks_url`\n   * @param data {@link B2BSSOOIDCUpdateConnectionRequest}\n   * @returns {@link B2BSSOOIDCUpdateConnectionResponse}\n   * @async\n   * @throws A {@link StytchError} on a non-2xx response from the Stytch API\n   * @throws A {@link RequestError} when the Stytch API cannot be reached\n   */\n\n  updateConnection(data) {\n    return (0, _shared.request)(this.fetchConfig, {\n      method: \"PUT\",\n      url: `/v1/b2b/sso/oidc/${data.organization_id}/connections/${data.connection_id}`,\n      data: {\n        display_name: data.display_name,\n        client_id: data.client_id,\n        client_secret: data.client_secret,\n        issuer: data.issuer,\n        authorization_url: data.authorization_url,\n        token_url: data.token_url,\n        userinfo_url: data.userinfo_url,\n        jwks_url: data.jwks_url\n      }\n    });\n  }\n}\nexports.OIDC = OIDC;","map":{"version":3,"names":["Object","defineProperty","exports","value","OIDC","_shared","require","constructor","fetchConfig","createConnection","data","request","method","url","organization_id","display_name","updateConnection","connection_id","client_id","client_secret","issuer","authorization_url","token_url","userinfo_url","jwks_url"],"sources":["D:/code/Techfriar/week5-task/verifications/node_modules/stytch/dist/b2b/sso_oidc.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OIDC = void 0;\n\nvar _shared = require(\"../shared\");\n\n// !!!\n// WARNING: This file is autogenerated\n// Only modify code within MANUAL() sections\n// or your changes may be overwritten later!\n// !!!\nclass OIDC {\n  constructor(fetchConfig) {\n    this.fetchConfig = fetchConfig;\n  }\n  /**\n   * Create a new OIDC Connection.\n   * @param data {@link B2BSSOOIDCCreateConnectionRequest}\n   * @returns {@link B2BSSOOIDCCreateConnectionResponse}\n   * @async\n   * @throws A {@link StytchError} on a non-2xx response from the Stytch API\n   * @throws A {@link RequestError} when the Stytch API cannot be reached\n   */\n\n\n  createConnection(data) {\n    return (0, _shared.request)(this.fetchConfig, {\n      method: \"POST\",\n      url: `/v1/b2b/sso/oidc/${data.organization_id}`,\n      data: {\n        display_name: data.display_name\n      }\n    });\n  }\n  /**\n   * Updates an existing OIDC connection.\n   *\n   * When the value of `issuer` changes, Stytch will attempt to retrieve the\n   * [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata)\n   * document found at `$/.well-known/openid-configuration`.\n   * If the metadata document can be retrieved successfully, Stytch will use it to infer the values of\n   * `authorization_url`, `token_url`, `jwks_url`, and `userinfo_url`.\n   * The `client_id` and `client_secret` values cannot be inferred from the metadata document, and *must* be\n   * passed in explicitly.\n   *\n   * If the metadata document cannot be retrieved, Stytch will still update the connection using values from\n   * the request body.\n   *\n   * If the metadata document can be retrieved, and values are passed in the request body, the explicit\n   * values passed in from the request body will take precedence over the values inferred from the metadata\n   * document.\n   *\n   * Note that a newly created connection will not become active until all of the following fields are\n   * provided:\n   * * `issuer`\n   * * `client_id`\n   * * `client_secret`\n   * * `authorization_url`\n   * * `token_url`\n   * * `userinfo_url`\n   * * `jwks_url`\n   * @param data {@link B2BSSOOIDCUpdateConnectionRequest}\n   * @returns {@link B2BSSOOIDCUpdateConnectionResponse}\n   * @async\n   * @throws A {@link StytchError} on a non-2xx response from the Stytch API\n   * @throws A {@link RequestError} when the Stytch API cannot be reached\n   */\n\n\n  updateConnection(data) {\n    return (0, _shared.request)(this.fetchConfig, {\n      method: \"PUT\",\n      url: `/v1/b2b/sso/oidc/${data.organization_id}/connections/${data.connection_id}`,\n      data: {\n        display_name: data.display_name,\n        client_id: data.client_id,\n        client_secret: data.client_secret,\n        issuer: data.issuer,\n        authorization_url: data.authorization_url,\n        token_url: data.token_url,\n        userinfo_url: data.userinfo_url,\n        jwks_url: data.jwks_url\n      }\n    });\n  }\n\n}\n\nexports.OIDC = OIDC;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,IAAI,GAAG,KAAK,CAAC;AAErB,IAAIC,OAAO,GAAGC,OAAO,CAAC,WAAW,CAAC;;AAElC;AACA;AACA;AACA;AACA;AACA,MAAMF,IAAI,CAAC;EACTG,WAAWA,CAACC,WAAW,EAAE;IACvB,IAAI,CAACA,WAAW,GAAGA,WAAW;EAChC;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EAGEC,gBAAgBA,CAACC,IAAI,EAAE;IACrB,OAAO,CAAC,CAAC,EAAEL,OAAO,CAACM,OAAO,EAAE,IAAI,CAACH,WAAW,EAAE;MAC5CI,MAAM,EAAE,MAAM;MACdC,GAAG,EAAG,oBAAmBH,IAAI,CAACI,eAAgB,EAAC;MAC/CJ,IAAI,EAAE;QACJK,YAAY,EAAEL,IAAI,CAACK;MACrB;IACF,CAAC,CAAC;EACJ;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGEC,gBAAgBA,CAACN,IAAI,EAAE;IACrB,OAAO,CAAC,CAAC,EAAEL,OAAO,CAACM,OAAO,EAAE,IAAI,CAACH,WAAW,EAAE;MAC5CI,MAAM,EAAE,KAAK;MACbC,GAAG,EAAG,oBAAmBH,IAAI,CAACI,eAAgB,gBAAeJ,IAAI,CAACO,aAAc,EAAC;MACjFP,IAAI,EAAE;QACJK,YAAY,EAAEL,IAAI,CAACK,YAAY;QAC/BG,SAAS,EAAER,IAAI,CAACQ,SAAS;QACzBC,aAAa,EAAET,IAAI,CAACS,aAAa;QACjCC,MAAM,EAAEV,IAAI,CAACU,MAAM;QACnBC,iBAAiB,EAAEX,IAAI,CAACW,iBAAiB;QACzCC,SAAS,EAAEZ,IAAI,CAACY,SAAS;QACzBC,YAAY,EAAEb,IAAI,CAACa,YAAY;QAC/BC,QAAQ,EAAEd,IAAI,CAACc;MACjB;IACF,CAAC,CAAC;EACJ;AAEF;AAEAtB,OAAO,CAACE,IAAI,GAAGA,IAAI"},"metadata":{},"sourceType":"script","externalDependencies":[]}