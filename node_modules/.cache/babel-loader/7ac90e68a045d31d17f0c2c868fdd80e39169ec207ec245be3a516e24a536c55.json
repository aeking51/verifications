{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OAuth = void 0;\nvar _shared = require(\"../shared\");\n\n// !!!\n// WARNING: This file is autogenerated\n// Only modify code within MANUAL() sections\n// or your changes may be overwritten later!\n// !!!\nclass OAuth {\n  constructor(fetchConfig) {\n    this.fetchConfig = fetchConfig;\n  }\n  /**\n   * Generate an OAuth Attach Token to pre-associate an OAuth flow with an existing Stytch User. Pass the\n   * returned `oauth_attach_token` to the same provider's OAuth Start endpoint to treat this OAuth flow as a\n   * login for that user instead of a signup for a new user.\n   *\n   * Exactly one of `user_id`, `session_token`, or `session_jwt` must be provided to identify the target\n   * Stytch User.\n   *\n   * This is an optional step in the OAuth flow. Stytch can often determine whether to create a new user or\n   * log in an existing one based on verified identity provider information. This endpoint is useful for\n   * cases where we can't, such as missing or unverified provider information.\n   * @param data {@link OAuthAttachRequest}\n   * @returns {@link OAuthAttachResponse}\n   * @async\n   * @throws A {@link StytchError} on a non-2xx response from the Stytch API\n   * @throws A {@link RequestError} when the Stytch API cannot be reached\n   */\n\n  attach(data) {\n    return (0, _shared.request)(this.fetchConfig, {\n      method: \"POST\",\n      url: `/v1/oauth/attach`,\n      data\n    });\n  }\n  /**\n   * Authenticate a User given a `token`. This endpoint verifies that the user completed the OAuth flow by\n   * verifying that the token is valid and hasn't expired. To initiate a Stytch session for the user while\n   * authenticating their OAuth token, include `session_duration_minutes`; a session with the identity\n   * provider, e.g. Google or Facebook, will always be initiated upon successful authentication.\n   * @param data {@link OAuthAuthenticateRequest}\n   * @returns {@link OAuthAuthenticateResponse}\n   * @async\n   * @throws A {@link StytchError} on a non-2xx response from the Stytch API\n   * @throws A {@link RequestError} when the Stytch API cannot be reached\n   */\n\n  authenticate(data) {\n    return (0, _shared.request)(this.fetchConfig, {\n      method: \"POST\",\n      url: `/v1/oauth/authenticate`,\n      data\n    });\n  }\n}\nexports.OAuth = OAuth;","map":{"version":3,"names":["Object","defineProperty","exports","value","OAuth","_shared","require","constructor","fetchConfig","attach","data","request","method","url","authenticate"],"sources":["D:/code/Techfriar/week5-task/verifications/node_modules/stytch/dist/b2c/oauth.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OAuth = void 0;\n\nvar _shared = require(\"../shared\");\n\n// !!!\n// WARNING: This file is autogenerated\n// Only modify code within MANUAL() sections\n// or your changes may be overwritten later!\n// !!!\nclass OAuth {\n  constructor(fetchConfig) {\n    this.fetchConfig = fetchConfig;\n  }\n  /**\n   * Generate an OAuth Attach Token to pre-associate an OAuth flow with an existing Stytch User. Pass the\n   * returned `oauth_attach_token` to the same provider's OAuth Start endpoint to treat this OAuth flow as a\n   * login for that user instead of a signup for a new user.\n   *\n   * Exactly one of `user_id`, `session_token`, or `session_jwt` must be provided to identify the target\n   * Stytch User.\n   *\n   * This is an optional step in the OAuth flow. Stytch can often determine whether to create a new user or\n   * log in an existing one based on verified identity provider information. This endpoint is useful for\n   * cases where we can't, such as missing or unverified provider information.\n   * @param data {@link OAuthAttachRequest}\n   * @returns {@link OAuthAttachResponse}\n   * @async\n   * @throws A {@link StytchError} on a non-2xx response from the Stytch API\n   * @throws A {@link RequestError} when the Stytch API cannot be reached\n   */\n\n\n  attach(data) {\n    return (0, _shared.request)(this.fetchConfig, {\n      method: \"POST\",\n      url: `/v1/oauth/attach`,\n      data\n    });\n  }\n  /**\n   * Authenticate a User given a `token`. This endpoint verifies that the user completed the OAuth flow by\n   * verifying that the token is valid and hasn't expired. To initiate a Stytch session for the user while\n   * authenticating their OAuth token, include `session_duration_minutes`; a session with the identity\n   * provider, e.g. Google or Facebook, will always be initiated upon successful authentication.\n   * @param data {@link OAuthAuthenticateRequest}\n   * @returns {@link OAuthAuthenticateResponse}\n   * @async\n   * @throws A {@link StytchError} on a non-2xx response from the Stytch API\n   * @throws A {@link RequestError} when the Stytch API cannot be reached\n   */\n\n\n  authenticate(data) {\n    return (0, _shared.request)(this.fetchConfig, {\n      method: \"POST\",\n      url: `/v1/oauth/authenticate`,\n      data\n    });\n  }\n\n}\n\nexports.OAuth = OAuth;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,KAAK,GAAG,KAAK,CAAC;AAEtB,IAAIC,OAAO,GAAGC,OAAO,CAAC,WAAW,CAAC;;AAElC;AACA;AACA;AACA;AACA;AACA,MAAMF,KAAK,CAAC;EACVG,WAAWA,CAACC,WAAW,EAAE;IACvB,IAAI,CAACA,WAAW,GAAGA,WAAW;EAChC;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGEC,MAAMA,CAACC,IAAI,EAAE;IACX,OAAO,CAAC,CAAC,EAAEL,OAAO,CAACM,OAAO,EAAE,IAAI,CAACH,WAAW,EAAE;MAC5CI,MAAM,EAAE,MAAM;MACdC,GAAG,EAAG,kBAAiB;MACvBH;IACF,CAAC,CAAC;EACJ;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGEI,YAAYA,CAACJ,IAAI,EAAE;IACjB,OAAO,CAAC,CAAC,EAAEL,OAAO,CAACM,OAAO,EAAE,IAAI,CAACH,WAAW,EAAE;MAC5CI,MAAM,EAAE,MAAM;MACdC,GAAG,EAAG,wBAAuB;MAC7BH;IACF,CAAC,CAAC;EACJ;AAEF;AAEAR,OAAO,CAACE,KAAK,GAAGA,KAAK"},"metadata":{},"sourceType":"script","externalDependencies":[]}