{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MagicLinks = void 0;\nvar _magic_links_email = require(\"./magic_links_email\");\nvar _shared = require(\"../shared\");\n\n// !!!\n// WARNING: This file is autogenerated\n// Only modify code within MANUAL() sections\n// or your changes may be overwritten later!\n// !!!\nclass MagicLinks {\n  constructor(fetchConfig) {\n    this.fetchConfig = fetchConfig;\n    this.email = new _magic_links_email.Email(this.fetchConfig);\n  }\n  /**\n   * Authenticate a User given a Magic Link. This endpoint verifies that the Magic Link token is valid,\n   * hasn't expired or been previously used, and any optional security settings such as IP match or user\n   * agent match are satisfied.\n   * @param data {@link MagicLinksAuthenticateRequest}\n   * @returns {@link MagicLinksAuthenticateResponse}\n   * @async\n   * @throws A {@link StytchError} on a non-2xx response from the Stytch API\n   * @throws A {@link RequestError} when the Stytch API cannot be reached\n   */\n\n  authenticate(data) {\n    return (0, _shared.request)(this.fetchConfig, {\n      method: \"POST\",\n      url: `/v1/magic_links/authenticate`,\n      data\n    });\n  }\n  /**\n   * Create an embeddable Magic Link token for a User. Access to this endpoint is restricted. To enable it,\n   * please send us a note at support@stytch.com.\n   *\n   * ### Next steps\n   * Send the returned `token` value to the end user in a link which directs to your application. When the\n   * end user follows your link, collect the token, and call\n   * [Authenticate Magic Link](https://stytch.com/docs/api/authenticate-magic-link) to complete\n   * authentication.\n   * @param data {@link MagicLinksCreateRequest}\n   * @returns {@link MagicLinksCreateResponse}\n   * @async\n   * @throws A {@link StytchError} on a non-2xx response from the Stytch API\n   * @throws A {@link RequestError} when the Stytch API cannot be reached\n   */\n\n  create(data) {\n    return (0, _shared.request)(this.fetchConfig, {\n      method: \"POST\",\n      url: `/v1/magic_links`,\n      data\n    });\n  }\n}\nexports.MagicLinks = MagicLinks;","map":{"version":3,"names":["Object","defineProperty","exports","value","MagicLinks","_magic_links_email","require","_shared","constructor","fetchConfig","email","Email","authenticate","data","request","method","url","create"],"sources":["D:/code/Techfriar/week5-task/verifications/node_modules/stytch/dist/b2c/magic_links.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MagicLinks = void 0;\n\nvar _magic_links_email = require(\"./magic_links_email\");\n\nvar _shared = require(\"../shared\");\n\n// !!!\n// WARNING: This file is autogenerated\n// Only modify code within MANUAL() sections\n// or your changes may be overwritten later!\n// !!!\nclass MagicLinks {\n  constructor(fetchConfig) {\n    this.fetchConfig = fetchConfig;\n    this.email = new _magic_links_email.Email(this.fetchConfig);\n  }\n  /**\n   * Authenticate a User given a Magic Link. This endpoint verifies that the Magic Link token is valid,\n   * hasn't expired or been previously used, and any optional security settings such as IP match or user\n   * agent match are satisfied.\n   * @param data {@link MagicLinksAuthenticateRequest}\n   * @returns {@link MagicLinksAuthenticateResponse}\n   * @async\n   * @throws A {@link StytchError} on a non-2xx response from the Stytch API\n   * @throws A {@link RequestError} when the Stytch API cannot be reached\n   */\n\n\n  authenticate(data) {\n    return (0, _shared.request)(this.fetchConfig, {\n      method: \"POST\",\n      url: `/v1/magic_links/authenticate`,\n      data\n    });\n  }\n  /**\n   * Create an embeddable Magic Link token for a User. Access to this endpoint is restricted. To enable it,\n   * please send us a note at support@stytch.com.\n   *\n   * ### Next steps\n   * Send the returned `token` value to the end user in a link which directs to your application. When the\n   * end user follows your link, collect the token, and call\n   * [Authenticate Magic Link](https://stytch.com/docs/api/authenticate-magic-link) to complete\n   * authentication.\n   * @param data {@link MagicLinksCreateRequest}\n   * @returns {@link MagicLinksCreateResponse}\n   * @async\n   * @throws A {@link StytchError} on a non-2xx response from the Stytch API\n   * @throws A {@link RequestError} when the Stytch API cannot be reached\n   */\n\n\n  create(data) {\n    return (0, _shared.request)(this.fetchConfig, {\n      method: \"POST\",\n      url: `/v1/magic_links`,\n      data\n    });\n  }\n\n}\n\nexports.MagicLinks = MagicLinks;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,UAAU,GAAG,KAAK,CAAC;AAE3B,IAAIC,kBAAkB,GAAGC,OAAO,CAAC,qBAAqB,CAAC;AAEvD,IAAIC,OAAO,GAAGD,OAAO,CAAC,WAAW,CAAC;;AAElC;AACA;AACA;AACA;AACA;AACA,MAAMF,UAAU,CAAC;EACfI,WAAWA,CAACC,WAAW,EAAE;IACvB,IAAI,CAACA,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,KAAK,GAAG,IAAIL,kBAAkB,CAACM,KAAK,CAAC,IAAI,CAACF,WAAW,CAAC;EAC7D;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGEG,YAAYA,CAACC,IAAI,EAAE;IACjB,OAAO,CAAC,CAAC,EAAEN,OAAO,CAACO,OAAO,EAAE,IAAI,CAACL,WAAW,EAAE;MAC5CM,MAAM,EAAE,MAAM;MACdC,GAAG,EAAG,8BAA6B;MACnCH;IACF,CAAC,CAAC;EACJ;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGEI,MAAMA,CAACJ,IAAI,EAAE;IACX,OAAO,CAAC,CAAC,EAAEN,OAAO,CAACO,OAAO,EAAE,IAAI,CAACL,WAAW,EAAE;MAC5CM,MAAM,EAAE,MAAM;MACdC,GAAG,EAAG,iBAAgB;MACtBH;IACF,CAAC,CAAC;EACJ;AAEF;AAEAX,OAAO,CAACE,UAAU,GAAGA,UAAU"},"metadata":{},"sourceType":"script","externalDependencies":[]}